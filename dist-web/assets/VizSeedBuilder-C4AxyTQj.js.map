{"version":3,"file":"VizSeedBuilder-C4AxyTQj.js","sources":["../../node_modules/zod/v3/helpers/util.js","../../node_modules/zod/v3/ZodError.js","../../node_modules/zod/v3/locales/en.js","../../node_modules/zod/v3/errors.js","../../node_modules/zod/v3/helpers/parseUtil.js","../../node_modules/zod/v3/helpers/errorUtil.js","../../node_modules/zod/v3/types.js","../../src/types/charts.ts","../../src/utils/DataProcessor.ts","../../src/datasets/DataSet.ts","../../src/pipeline/PipelineCore.ts","../../src/pipeline/spec/DataModule.ts","../../src/pipeline/spec/style/Legend.ts","../../src/pipeline/spec/style/Label.ts","../../src/pipeline/spec/style/Tooltip.ts","../../src/pipeline/spec/style/Axes.ts","../../src/pipeline/spec/init/initVChartBar.ts","../../src/pipeline/spec/specPipelines/Bar.ts","../../src/pipeline/spec/aggregation/stacked.ts","../../src/pipeline/spec/specPipelines/Bar_stacked.ts","../../src/pipeline/spec/aggregation/grouped.ts","../../src/pipeline/spec/specPipelines/Bar_grouped.ts","../../src/pipeline/spec/aggregation/percent.ts","../../src/pipeline/spec/specPipelines/Bar_percent.ts","../../src/pipeline/spec/specPipelines/Column.ts","../../src/pipeline/spec/init/initVChartColumn.ts","../../src/pipeline/spec/specPipelines/Column_stacked.ts","../../src/pipeline/spec/specPipelines/Column_grouped.ts","../../src/pipeline/spec/specPipelines/Column_percent.ts","../../src/pipeline/spec/init/initVChartLine.ts","../../src/pipeline/spec/specPipelines/Line.ts","../../src/pipeline/spec/init/initVChartArea.ts","../../src/pipeline/spec/specPipelines/Area.ts","../../src/pipeline/spec/specPipelines/Area_stacked.ts","../../src/pipeline/spec/specPipelines/Area_percent.ts","../../src/pipeline/spec/init/initVChartScatter.ts","../../src/pipeline/spec/specPipelines/Scatter.ts","../../src/pipeline/spec/init/initVChartPie.ts","../../src/pipeline/spec/specPipelines/Pie.ts","../../src/pipeline/spec/init/initVChartDonut.ts","../../src/pipeline/spec/specPipelines/Donut.ts","../../src/pipeline/spec/init/initVTable.ts","../../src/pipeline/spec/specPipelines/Table.ts","../../src/pipeline/vizSeed/ChartAdapterModule.ts","../../src/pipeline/vizSeed/VizSeedInitModule.ts","../../src/pipeline/vizSeed/utils/ElevateAndReduce.ts","../../src/pipeline/vizSeed/utils/DimensionAndMeasureCopy.ts","../../src/pipeline/vizSeed/dataReshape/DataReshapeModule_1M1D1G.ts","../../src/pipeline/vizSeed/VizSeedCleanupModule.ts","../../src/pipeline/vizSeed/channelMapping/HorizontalBarMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Bar.ts","../../src/pipeline/vizSeed/channelMapping/VerticalColumnMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Column.ts","../../src/pipeline/vizSeed/channelMapping/TimeSeriesMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Line.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Area.ts","../../src/pipeline/vizSeed/DataReshapeModule.ts","../../src/pipeline/vizSeed/channelMapping/TwoMeasureMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Scatter.ts","../../src/pipeline/vizSeed/channelMapping/CategoryValueMapping.ts","../../src/pipeline/vizSeed/dataReshape/DataReshapeModule_1M1D.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Pie.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Donut.ts","../../src/pipeline/vizSeed/channelMapping/TableRowColumnMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Table.ts","../../src/pipeline/PipelineRegistry.ts","../../node_modules/radash/dist/esm/typed.mjs","../../node_modules/radash/dist/esm/object.mjs","../../src/builder/VizSeedBuilder.ts"],"sourcesContent":["export var util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nexport var objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nexport const ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n","import { util } from \"./helpers/util.js\";\nexport const ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nexport const quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexport class ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n","import { ZodIssueCode } from \"../ZodError.js\";\nimport { util, ZodParsedType } from \"../helpers/util.js\";\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\nexport default errorMap;\n","import defaultErrorMap from \"./locales/en.js\";\nlet overrideErrorMap = defaultErrorMap;\nexport { defaultErrorMap };\nexport function setErrorMap(map) {\n    overrideErrorMap = map;\n}\nexport function getErrorMap() {\n    return overrideErrorMap;\n}\n","import { getErrorMap } from \"../errors.js\";\nimport defaultErrorMap from \"../locales/en.js\";\nexport const makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nexport const EMPTY_PATH = [];\nexport function addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === defaultErrorMap ? undefined : defaultErrorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nexport class ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nexport const INVALID = Object.freeze({\n    status: \"aborted\",\n});\nexport const DIRTY = (value) => ({ status: \"dirty\", value });\nexport const OK = (value) => ({ status: \"valid\", value });\nexport const isAborted = (x) => x.status === \"aborted\";\nexport const isDirty = (x) => x.status === \"dirty\";\nexport const isValid = (x) => x.status === \"valid\";\nexport const isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n","export var errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n","import { ZodError, ZodIssueCode, } from \"./ZodError.js\";\nimport { defaultErrorMap, getErrorMap } from \"./errors.js\";\nimport { errorUtil } from \"./helpers/errorUtil.js\";\nimport { DIRTY, INVALID, OK, ParseStatus, addIssueToContext, isAborted, isAsync, isDirty, isValid, makeIssue, } from \"./helpers/parseUtil.js\";\nimport { util, ZodParsedType, getParsedType } from \"./helpers/util.js\";\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nexport class ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nexport function datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nexport class ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport class ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nexport class ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nexport class ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nexport class ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nexport class ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nexport class ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nexport class ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nexport class ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nexport class ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!isValid(base))\n                        return INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nexport { ZodEffects as ZodTransformer };\nexport class ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nexport const BRAND = Symbol(\"zod_brand\");\nexport class ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nexport class ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nexport class ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nexport function custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nexport { ZodType as Schema, ZodType as ZodSchema };\nexport const late = {\n    object: ZodObject.lazycreate,\n};\nexport var ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nexport const coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nexport { anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, dateType as date, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, instanceOfType as instanceof, intersectionType as intersection, lazyType as lazy, literalType as literal, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, recordType as record, setType as set, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, };\nexport const NEVER = INVALID;\n","import { z } from 'zod';\n\nexport enum ChartType {\n  BAR = 'bar',           // 柱状图\n  BAR_STACKED = 'bar_stacked',     // 堆叠柱状图\n  BAR_GROUPED = 'bar_grouped',     // 分组柱状图\n  BAR_PERCENT = 'bar_percent',     // 百分比柱状图\n  \n  COLUMN = 'column',               // 条形图\n  COLUMN_STACKED = 'column_stacked', // 堆叠条形图\n  COLUMN_GROUPED = 'column_grouped', // 分组条形图\n  COLUMN_PERCENT = 'column_percent', // 百分比条形图\n  \n  LINE = 'line',         // 折线图\n  AREA = 'area',         // 面积图\n  AREA_STACKED = 'area_stacked', // 堆叠面积图\n  AREA_PERCENT = 'area_percent', // 百分比面积图\n  SCATTER = 'scatter',   // 散点图\n  PIE = 'pie',           // 饼图\n  DONUT = 'donut',       // 环形图\n  TABLE = 'table'        // 表格\n}\n\n// Zod schema用于验证和转换字符串为ChartType枚举\nexport const ChartTypeSchema = z.enum([\n  'bar', 'bar_stacked', 'bar_grouped', 'bar_percent', 'column', 'column_stacked', 'column_grouped', 'column_percent', 'line', 'area', 'area_stacked', 'area_percent', 'scatter', 'pie', 'donut', 'table'\n]).transform((value) => {\n  // 将字符串转换为对应的枚举值\n  const enumMap: Record<string, ChartType> = {\n    'bar': ChartType.BAR,\n    'bar_stacked': ChartType.BAR_STACKED,\n    'bar_grouped': ChartType.BAR_GROUPED,\n    'bar_percent': ChartType.BAR_PERCENT,\n    'column': ChartType.COLUMN,\n    'column_stacked': ChartType.COLUMN_STACKED,\n    'column_grouped': ChartType.COLUMN_GROUPED,\n    'column_percent': ChartType.COLUMN_PERCENT,\n    'line': ChartType.LINE,\n    'area': ChartType.AREA,\n    'area_stacked': ChartType.AREA_STACKED,\n    'area_percent': ChartType.AREA_PERCENT,\n    'scatter': ChartType.SCATTER,\n    'pie': ChartType.PIE,\n    'donut': ChartType.DONUT,\n    'table': ChartType.TABLE\n  };\n  return enumMap[value];\n});\n\n// 便捷函数：将字符串转换为ChartType枚举\nexport function parseChartType(input: string): ChartType {\n  return ChartTypeSchema.parse(input);\n}\n\n// 通道映射接口 - 仅供内部自动映射使用\nexport interface ChannelMapping {\n  // 通用通道\n  x?: string;           // X轴字段（通常是指标）\n  y?: string;           // Y轴字段（可以是维度或指标）\n  color?: string;       // 颜色字段（维度）\n  group?: string;       // 分组字段（维度）\n  \n  // 饼图专用\n  category?: string;    // 分类字段（维度）\n  value?: string;       // 数值字段（指标）\n  \n  // 表格专用\n  rowDimension?: string;    // 行维度\n  columnDimension?: string; // 列维度\n  measure?: string;         // 指标字段\n}\n\n// 通道定义接口\nexport interface ChartChannels {\n  dimensionChannels: string[];  // 维度通道\n  measureChannels: string[];    // 指标通道\n}\n\n// 图表数据结构要求\nexport interface ChartDataRequirement {\n  channels: ChartChannels;      // 通道配置\n  idealDimensions: number;      // 理想维度数量\n  idealMeasures: number;        // 理想指标数量\n  minDimensions: number;        // 最小维度数量\n  minMeasures: number;          // 最小指标数量\n  chartType: string;            // 图表类型\n}\n// 图表类型数据要求配置\nexport const CHART_DATA_REQUIREMENTS: Record<ChartType, ChartDataRequirement> = {\n  bar: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'bar'\n  },\n  bar_stacked: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'bar_stacked'\n  },\n  bar_grouped: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'bar_grouped'\n  },\n  bar_percent: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'bar_percent'\n  },\n  column: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'column'\n  },\n  column_stacked: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'column_stacked'\n  },\n  column_grouped: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'column_grouped'\n  },\n  column_percent: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'column_percent'\n  },\n  line: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'line'\n  },\n  area: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'area'\n  },\n  area_stacked: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'area_stacked'\n  },\n  area_percent: {\n    channels: {\n      dimensionChannels: ['x', 'color'],\n      measureChannels: ['y']\n    },\n    idealDimensions: 2,\n    idealMeasures: 1,\n    minDimensions: 2,\n    minMeasures: 1,\n    chartType: 'area_percent'\n  },\n  scatter: {\n    channels: {\n      dimensionChannels: ['color'],\n      measureChannels: ['x', 'y']\n    },\n    idealDimensions: 0,\n    idealMeasures: 2,\n    minDimensions: 0,\n    minMeasures: 2,\n    chartType: 'scatter'\n  },\n  pie: {\n    channels: {\n      dimensionChannels: ['category'],\n      measureChannels: ['value']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'pie'\n  },\n  donut: {\n    channels: {\n      dimensionChannels: ['category'],\n      measureChannels: ['value']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 1,\n    minMeasures: 1,\n    chartType: 'donut'\n  },\n  table: {\n    channels: {\n      dimensionChannels: ['rowDimension', 'columnDimension'],\n      measureChannels: ['measure']\n    },\n    idealDimensions: 1,\n    idealMeasures: 1,\n    minDimensions: 0,\n    minMeasures: 0,\n    chartType: 'table'\n  }\n};","import { FieldMeta, FieldType, FieldInferenceOptions, FieldStats } from '../types/data';\n\nexport class DataProcessor {\n  \n  // 智能字段推断方法\n  public static inferFields(rows: Record<string, any>[], options?: FieldInferenceOptions): FieldMeta[] {\n    if (!rows || rows.length === 0) {\n      return [];\n    }\n\n    const fieldNames = Object.keys(rows[0]);\n    const fields: FieldMeta[] = [];\n\n    for (const fieldName of fieldNames) {\n      const values = rows.map(row => row[fieldName]).filter(v => v != null);\n      if (values.length === 0) continue;\n\n      const fieldMeta = this.inferSingleField(fieldName, values, options);\n      fields.push(fieldMeta);\n    }\n\n    return fields;\n  }\n\n  private static inferSingleField(fieldName: string, values: any[], options?: FieldInferenceOptions): FieldMeta {\n    // 自定义类型推断\n    if (options?.typeHint) {\n      const customType = options.typeHint(fieldName, values);\n      if (customType) {\n        return this.createFieldMeta(fieldName, customType, values, options);\n      }\n    }\n\n    // 自动类型推断\n    const inferredType = this.inferFieldType(values, options?.autoConvertDates);\n    return this.createFieldMeta(fieldName, inferredType, values, options);\n  }\n\n  private static inferFieldType(values: any[], autoConvertDates = true): FieldType {\n    const sample = values.slice(0, Math.min(100, values.length)); // 采样前100个值\n    \n    // 检查是否为数值类型\n    const numericCount = sample.filter(v => typeof v === 'number' && !isNaN(v)).length;\n    if (numericCount / sample.length > 0.8) {\n      return 'number';\n    }\n\n    // 检查是否为布尔类型\n    const booleanCount = sample.filter(v => typeof v === 'boolean').length;\n    if (booleanCount / sample.length > 0.8) {\n      return 'boolean';\n    }\n\n    // 检查是否为日期类型\n    if (autoConvertDates) {\n      const dateCount = sample.filter(v => this.isDateLike(v)).length;\n      if (dateCount / sample.length > 0.8) {\n        return 'date';\n      }\n    }\n\n    // 默认为字符串类型\n    return 'string';\n  }\n\n  private static isDateLike(value: any): boolean {\n    if (value instanceof Date) return true;\n    if (typeof value !== 'string') return false;\n    \n    // 常见日期格式正则\n    const datePatterns = [\n      /^\\d{4}-\\d{2}-\\d{2}$/, // 2024-01-01\n      /^\\d{4}\\/\\d{2}\\/\\d{2}$/, // 2024/01/01\n      /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // 01/01/2024\n      /^\\d{4}-\\d{2}$/, // 2024-01\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/, // ISO format\n    ];\n    \n    return datePatterns.some(pattern => pattern.test(value)) && !isNaN(Date.parse(value));\n  }\n\n  private static createFieldMeta(fieldName: string, type: FieldType, values: any[], options?: FieldInferenceOptions): FieldMeta {\n    const stats = this.calculateFieldStats(values);\n    \n    let role: 'dimension' | 'measure';\n    \n    if (type === 'number') {\n      // 数值类型的角色推断\n      if (options?.numericRoleHint) {\n        role = options.numericRoleHint(fieldName, values as number[]);\n      } else {\n        // 默认推断规则\n        role = this.inferNumericRole(fieldName, values as number[], stats);\n      }\n    } else {\n      role = 'dimension';\n    }\n\n    return {\n      name: fieldName,\n      type,\n      role,\n      nullable: stats.nullCount > 0,\n      unique: stats.uniqueCount === stats.count,\n      aggregation: role === 'measure' ? (options?.defaultAggregation || 'sum') : undefined,\n      isDiscrete: role === 'dimension'\n    };\n  }\n\n  private static inferNumericRole(fieldName: string, values: number[], stats: FieldStats): 'dimension' | 'measure' {\n    const fieldLower = fieldName.toLowerCase();\n    \n    // 基于字段名的启发式规则\n    const dimensionKeywords = ['id', 'year', 'month', 'day', 'code', 'number', 'rank', 'level', 'grade'];\n    const measureKeywords = ['amount', 'count', 'sum', 'total', 'avg', 'mean', 'price', 'cost', 'value', 'score', 'rate', 'percent', 'sales', 'profit', 'revenue'];\n    \n    if (dimensionKeywords.some(keyword => fieldLower.includes(keyword))) {\n      return 'dimension';\n    }\n    \n    if (measureKeywords.some(keyword => fieldLower.includes(keyword))) {\n      return 'measure';\n    }\n    \n    // 基于数据特征的推断\n    const uniqueRatio = stats.uniqueCount / stats.count;\n    \n    // 如果唯一值比例很高，可能是维度（如ID、编码等）\n    if (uniqueRatio > 0.9) {\n      return 'dimension';\n    }\n    \n    // 如果唯一值很少，但是数值范围小，可能是维度（如等级、评分等）\n    if (uniqueRatio < 0.1 && stats.max && stats.min && (stats.max - stats.min) < 10) {\n      return 'dimension';\n    }\n    \n    // 对于常见的业务数值（销售额、利润等），默认为指标\n    return 'measure';\n  }\n\n  private static calculateFieldStats(values: any[]): FieldStats {\n    const nonNullValues = values.filter(v => v != null);\n    const uniqueValues = new Set(nonNullValues);\n    \n    const stats: FieldStats = {\n      count: values.length,\n      nullCount: values.length - nonNullValues.length,\n      uniqueCount: uniqueValues.size\n    };\n    \n    if (nonNullValues.length > 0) {\n      // 数值类型的统计\n      const numericValues = nonNullValues.filter(v => typeof v === 'number' && !isNaN(v));\n      if (numericValues.length === nonNullValues.length) {\n        stats.min = Math.min(...numericValues);\n        stats.max = Math.max(...numericValues);\n        stats.mean = numericValues.reduce((sum, v) => sum + v, 0) / numericValues.length;\n        \n        const sorted = [...numericValues].sort((a, b) => a - b);\n        const mid = Math.floor(sorted.length / 2);\n        stats.median = sorted.length % 2 === 0 \n          ? (sorted[mid - 1] + sorted[mid]) / 2 \n          : sorted[mid];\n      } else {\n        // 非数值类型的最小值和最大值\n        const sortedValues = [...nonNullValues].sort();\n        stats.min = sortedValues[0];\n        stats.max = sortedValues[sortedValues.length - 1];\n      }\n    }\n    \n    return stats;\n  }\n\n  // 获取字段的所有唯一值（用于替代原来的values数组）\n  public static getFieldValues(fieldName: string, rows: Record<string, any>[]): any[] {\n    return [...new Set(rows.map(row => row[fieldName]).filter(v => v != null))];\n  }\n\n  // 获取字段的统计信息\n  public static getFieldStats(fieldName: string, rows: Record<string, any>[]): FieldStats {\n    const values = rows.map(row => row[fieldName]);\n    return this.calculateFieldStats(values);\n  }\n}","import { DataSet as IDataSet, FieldMeta, FieldInferenceOptions, DataSetOptions } from '../types/data';\nimport { DataProcessor } from '../utils/DataProcessor';\n\nexport class DataSet implements IDataSet {\n  public fields: FieldMeta[];\n  public rows: Record<string, any>[];\n\n  // 构造函数重载\n  constructor(rows: Record<string, any>[], options?: FieldInferenceOptions);\n  constructor(options: DataSetOptions);\n  constructor(\n    rowsOrOptions: Record<string, any>[] | DataSetOptions, \n    inferenceOptions?: FieldInferenceOptions\n  ) {\n    if (Array.isArray(rowsOrOptions)) {\n      // 直接传入rows数组的情况\n      this.rows = rowsOrOptions;\n      this.fields = DataProcessor.inferFields(this.rows, inferenceOptions);\n    } else {\n      // 传入DataSetOptions对象的情况（向后兼容）\n      const options = rowsOrOptions;\n      this.rows = options.rows;\n      \n      if (options.fields) {\n        this.fields = options.fields;\n      } else {\n        // 自动推断字段\n        this.fields = DataProcessor.inferFields(this.rows, options.inferenceOptions);\n      }\n    }\n  }\n\n  // 从rows数据自动生成DataSet\n  public static fromRows(rows: Record<string, any>[], options?: FieldInferenceOptions): DataSet {\n    return new DataSet({ rows, inferenceOptions: options });\n  }\n\n\n  // 获取字段的所有唯一值（替代原来的Field.values）\n  public getFieldValues(fieldName: string): any[] {\n    return DataProcessor.getFieldValues(fieldName, this.rows);\n  }\n\n  // 获取字段统计信息\n  public getFieldStats(fieldName: string) {\n    return DataProcessor.getFieldStats(fieldName, this.rows);\n  }\n\n  // 根据字段名获取字段元数据\n  public getField(fieldName: string): FieldMeta | undefined {\n    return this.fields.find(f => f.name === fieldName);\n  }\n\n  // 获取所有维度字段\n  public getDimensions(): FieldMeta[] {\n    return this.fields.filter(f => f.role === 'dimension');\n  }\n\n  // 获取所有指标字段\n  public getMeasures(): FieldMeta[] {\n    return this.fields.filter(f => f.role === 'measure');\n  }\n\n  // 克隆数据集\n  public clone(): DataSet {\n    return new DataSet({\n      fields: JSON.parse(JSON.stringify(this.fields)),\n      rows: JSON.parse(JSON.stringify(this.rows))\n    });\n  }\n\n  // 添加新字段\n  public addField(field: FieldMeta): void {\n    this.fields.push(field);\n  }\n\n  // 移除字段\n  public removeField(fieldName: string): void {\n    this.fields = this.fields.filter(f => f.name !== fieldName);\n  }\n\n}","/**\n * Pipeline 核心类型和工具函数\n * 简化的函数式管道处理系统\n */\n\nimport { NestedMeasure } from \"../types\";\nimport { ChartType, ChannelMapping } from \"../types/charts\";\n\n// 字段定义接口\nexport interface FieldDefinition {\n  id: string;\n  type: 'string' | 'number' | 'float' | 'date' | 'boolean';\n  alias: string;\n  location: 'dimension' | 'measure' | 'tooltips';\n  domain?: any[];\n  format?: Record<string, any>;\n}\n\n// 完整字段映射接口\nexport interface FieldMap {\n  [fieldId: string]: FieldDefinition;\n}\n\n// 用户字段选择接口\nexport interface FieldSelection {\n  dimensions: string[];  // 用户选择的维度字段ID\n  measures: string[];    // 用户选择的指标字段ID\n  groupMeasure?: NestedMeasure<string>[]; // 可选的分组指标字段ID\n  rowDimensions?: string[];  // 行维度字段（用于透视表等）\n  columnDimensions?: string[];  // 列维度字段（用于透视表等）\n}\n\n// Pipeline上下文接口\nexport interface PipelineContext {\n  chartType: ChartType; // 图表类型\n  encodes: ChannelMapping[]; // 映射通道配置\n  fieldMap: FieldMap;        // 完整字段映射定义\n  fieldSelection: FieldSelection;  // 用户字段选择\n  data: Record<string, any>[]; // 数据映射数组\n  visualStyle?: any;\n  \n  // 维度重塑相关\n  analysisResult?: any;       // 图表适配分析结果\n  theme: 'light' | 'dark' | 'custom'; // 主题配置\n  version: string; // 版本信息\n  [key: string]: any;\n}\n\n// Pipeline管道函数类型 - 简化为纯函数\nexport type PipelineStep<T = any> = (input: T, context: PipelineContext) => T;\n\n// 简化的管道函数工厂 - 使用reduce实现函数式组合\nexport const pipeline = <T>(steps: PipelineStep<T>[], initialValue: T) => {\n  return (context: PipelineContext) => {\n    return steps.reduce((result, step) => {\n      return step(result, context);\n    }, initialValue);\n  };\n};\n\n","/**\n * 数据处理模块\n * 可重用的Pipeline步骤，用于处理数据转换和字段映射\n */\n\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\n\n// 数据初始化步骤\nexport const initData: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { data} = context;\n\n  return {\n    ...spec,\n    data: [{\n      id: 'VizSeedData',\n      values: data,\n    }]\n  };\n};\n\n\n","/**\n * 图例配置步骤\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// 图例配置步骤\nexport const configureLegend: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { visualStyle } = context;\n  if (!visualStyle) return spec;\n\n  return {\n    ...spec,\n    legends: {\n      visible: visualStyle.legend !== false,\n      orient: 'right',\n      position: 'middle'\n    }\n  };\n};","/**\n * 标签配置步骤\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// 标签配置步骤\nexport const configureLabel: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { visualStyle } = context;\n  if (!visualStyle) return spec;\n\n  return {\n    ...spec,\n    label: {\n      visible: visualStyle.label !== false\n    }\n  };\n};","/**\n * 工具提示配置步骤\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// 工具提示配置步骤\nexport const configureTooltip: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { visualStyle } = context;\n  if (!visualStyle) return spec;\n\n  return {\n    ...spec,\n    tooltip: {\n      visible: visualStyle.tooltip !== false\n    }\n  };\n};","/**\n * 坐标轴配置步骤\n * 基于功能设计，而非图表类型\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// 综合坐标轴配置步骤（旧的兼容性方法）\nexport const configureAxes: PipelineStep = (spec: any, context: PipelineContext) => {\n  return {\n    ...spec,\n    axes: [\n      {\n        orient: 'bottom',\n        type: 'band'\n      },\n      {\n        orient: 'left',\n        type: 'linear'\n      }\n    ]\n  };\n};\n\n// X轴带状轴配置\nexport const xBandAxis: PipelineStep = (spec: any, context: PipelineContext) => {\n  const result = { ...spec };\n  if (!result.axes) {\n    result.axes = [];\n  }\n\n  result.axes.push({\n    orient: 'bottom',\n    type: 'band'\n  });\n  return result;\n};\n\n// X轴线性轴配置\nexport const xLinearAxis: PipelineStep = (spec: any, context: PipelineContext) => {\n  const result = { ...spec };\n  if (!result.axes) {\n    result.axes = [];\n  }\n  \n  result.axes.push({\n    orient: 'bottom',\n    type: 'linear'\n  });\n  return result;\n};\n\n// Y轴线性轴配置\nexport const yLinearAxis: PipelineStep = (spec: any, context: PipelineContext) => {\n  const result = { ...spec };\n  if (!result.axes) {\n    result.axes = [];\n  }\n\n  result.axes.push({\n    orient: 'left',\n    type: 'linear'\n  });\n  return result;\n};\n\n// Y轴带状轴配置\nexport const yBandAxis: PipelineStep = (spec: any, context: PipelineContext) => {\n  const result = { ...spec };\n  if (!result.axes) {\n    result.axes = [];\n  }\n\n  result.axes.push({\n    orient: 'left',\n    type: 'band'\n  });\n  return result;\n};\n\n// 双Y轴线性配置\nexport const yyLinearAxis: PipelineStep = (spec: any, context: PipelineContext) => {\n  const result = { ...spec };\n  if (!result.axes) {\n    result.axes = [];\n  }\n\n  result.axes.push({\n    orient: 'left',\n    type: 'linear'\n  });\n\n  result.axes.push({\n    orient: 'right',\n    type: 'linear'\n  });\n  return result;\n};","/**\n * VChart柱状图/条形图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart柱状图/条形图初始化（支持多种类型）\nexport const initVChartBar: PipelineStep = (spec: any, context: PipelineContext) => {\n  const chartType = 'bar';\n  const encodes = context.encodes[0] || {};\n  \n  // 根据图表类型设置不同的字段映射\n  const baseSpec = {\n    ...spec,\n    type: chartType,\n    direction: 'horizontal',\n    xField: encodes.x || encodes.category || 'category',\n    yField: encodes.y || encodes.value || 'value',\n    seriesField: encodes.group || 'group',\n  };\n\n  return baseSpec;\n};","/**\n * BAR图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xLinearAxis, yBandAxis } from '../style/Axes';\nimport { initVChartBar } from '../init/initVChartBar';\n\n// 创建BAR图表Pipeline\nexport const createBarSpecPipeline = () => pipeline([\n  initVChartBar,\n  initData,\n  xLinearAxis,\n  yBandAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\nexport const stacked: PipelineStep = (spec: any, context: PipelineContext) => {\n  return {\n    ...spec,\n    stack: true,\n  };\n};","/**\n * BAR图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xLinearAxis, yBandAxis } from '../style/Axes';\nimport { stacked } from '../aggregation/stacked';\nimport { initVChartBar } from '../init/initVChartBar';\n\n// 创建BAR图表Pipeline\nexport const createBarStackedSpecPipeline = () => pipeline([\n  initVChartBar,\n  initData,\n  stacked,\n  xLinearAxis,\n  yBandAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\nexport const barGrouped: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  return {\n    ...spec,\n    yField: [encodes.y, encodes.group],\n  };\n};\n\nexport const colGrouped: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  return {\n    ...spec,\n    xField: [encodes.x, encodes.group],\n  };\n};","/**\n * BAR图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xLinearAxis, yBandAxis } from '../style/Axes';\nimport { initVChartBar } from '../init/initVChartBar';\nimport { barGrouped } from '../aggregation/grouped';\nimport { configResponsive } from '../style/Responsive';\n\n// 创建BAR图表Pipeline\nexport const createBarGroupedSpecPipeline = () => pipeline([\n  initVChartBar,\n  initData,\n  barGrouped,\n  xLinearAxis,\n  yBandAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\nexport const percent: PipelineStep = (spec: any, context: PipelineContext) => {\n  return {\n    ...spec,\n    stack: true,\n    percent: true, // 添加百分比聚合\n  };\n};","/**\n * BAR图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xLinearAxis, yBandAxis } from '../style/Axes';\nimport { initVChartBar } from '../init/initVChartBar';\nimport { percent } from '../aggregation/percent';\n\n// 创建BAR图表Pipeline\nexport const createBarPercentSpecPipeline = () => pipeline([\n  initVChartBar,\n  initData,\n  percent,\n  xLinearAxis,\n  yBandAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * COLUMN图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { configureAxes } from '../style/Axes';\nimport { initVChartBar } from '../init/initVChartBar';\n\n// 创建COLUMN图表Pipeline\nexport const createColumnSpecPipeline = () => pipeline([\n  initVChartBar,\n  initData,\n  configureAxes,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart柱状图/条形图初始化模块\n */\n\nimport { series } from 'radash';\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart柱状图/条形图初始化（支持多种类型）\nexport const initVChartColumn: PipelineStep = (spec: any, context: PipelineContext) => {\n  const chartType = 'bar';\n  const encodes = context.encodes[0] || {};\n  \n  // 根据图表类型设置不同的字段映射\n  const baseSpec = {\n    ...spec,\n    type: chartType,\n    xField: encodes.x || encodes.category || 'category',\n    yField: encodes.y || encodes.value || 'value',\n    seriesField: encodes.group || encodes.color || 'group',\n  };\n\n\n  return baseSpec;\n};","/**\n * COLUMN堆叠图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xBandAxis, yLinearAxis } from '../style/Axes';\nimport { initVChartColumn } from '../init/initVChartColumn';\nimport { stacked } from '../aggregation/stacked';\nimport { configResponsive } from '../style/Responsive';\n\n// 创建COLUMN堆叠图表Pipeline\nexport const createColumnStackedSpecPipeline = () => pipeline([\n  initVChartColumn,\n  initData,\n  stacked,\n  xBandAxis,\n  yLinearAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * COLUMN分组图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xBandAxis, yLinearAxis } from '../style/Axes';\nimport { initVChartColumn } from '../init/initVChartColumn';\nimport { colGrouped } from '../aggregation/grouped';\n\n// 创建COLUMN分组图表Pipeline\nexport const createColumnGroupedSpecPipeline = () => pipeline([\n  initVChartColumn,\n  initData,\n  colGrouped,\n  xBandAxis,\n  yLinearAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * COLUMN百分比图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xBandAxis, yLinearAxis } from '../style/Axes';\nimport { initVChartColumn } from '../init/initVChartColumn';\nimport { percent } from '../aggregation/percent';\nimport { configResponsive } from '../style/Responsive';\n\n// 创建COLUMN百分比图表Pipeline\nexport const createColumnPercentSpecPipeline = () => pipeline([\n  initVChartColumn,\n  initData,\n  percent,\n  xBandAxis,\n  yLinearAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart折线图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart折线图初始化\nexport const initVChartLine: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  \n  return {\n    ...spec,\n    type: 'line',\n    xField: encodes.x || 'category',\n    yField: encodes.y || 'value',\n    seriesField: encodes.color || encodes.group\n  };\n};","/**\n * LINE图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { configureAxes } from '../style/Axes';\nimport { initVChartLine } from '../init/initVChartLine';\n\n// 创建LINE图表Pipeline\nexport const createLineSpecPipeline = () => pipeline([\n  initVChartLine,\n  initData,\n  configureAxes,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart面积图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart面积图初始化\nexport const initVChartArea: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { encodes } = context;\n  const mapping = encodes[0] || {};\n  \n  return {\n    ...spec,\n    type: 'area',\n    xField: mapping.x || 'category',\n    yField: mapping.y || 'value',\n    seriesField: mapping.color || mapping.group\n  };\n};","/**\n * AREA图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { configureAxes } from '../style/Axes';\nimport { initVChartArea } from '../init/initVChartArea';\n\n// 创建AREA图表Pipeline\nexport const createAreaSpecPipeline = () => pipeline([\n  initVChartArea,\n  initData,\n  configureAxes,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * AREA堆叠图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xBandAxis, yLinearAxis } from '../style/Axes';\nimport { initVChartArea } from '../init/initVChartArea';\nimport { stacked } from '../aggregation/stacked';\n\n// 创建AREA堆叠图表Pipeline\nexport const createAreaStackedSpecPipeline = () => pipeline([\n  initVChartArea,\n  initData,\n  stacked,\n  xBandAxis,\n  yLinearAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * AREA百分比图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { xBandAxis, yLinearAxis } from '../style/Axes';\nimport { initVChartArea } from '../init/initVChartArea';\nimport { percent } from '../aggregation/percent';\n\n// 创建AREA百分比图表Pipeline\nexport const createAreaPercentSpecPipeline = () => pipeline([\n  initVChartArea,\n  initData,\n  percent,\n  xBandAxis,\n  yLinearAxis,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart散点图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart散点图初始化\nexport const initVChartScatter: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  \n  return {\n    ...spec,\n    type: 'scatter',\n    xField: encodes.x || 'x',\n    yField: encodes.y || 'y',\n    seriesField: encodes.color || encodes.group\n  };\n};","/**\n * SCATTER图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { configureAxes } from '../style/Axes';\nimport { initVChartScatter } from '../init/initVChartScatter';\n\n// 创建SCATTER图表Pipeline\nexport const createScatterSpecPipeline = () => pipeline([\n  initVChartScatter,\n  initData,\n  configureAxes,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart饼图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart饼图初始化\nexport const initVChartPie: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  \n  return {\n    ...spec,\n    type: 'pie',\n    categoryField: encodes.category || encodes.x || 'category',\n    valueField: encodes.value || encodes.y || 'value'\n  };\n};","/**\n * PIE图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { initVChartPie } from '../init/initVChartPie';\n\n// 创建PIE图表Pipeline\nexport const createPieSpecPipeline = () => pipeline([\n  initVChartPie,\n  initData,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VChart饼图初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VChart饼图初始化\nexport const initVChartDonut: PipelineStep = (spec: any, context: PipelineContext) => {\n  const encodes = context.encodes[0] || {};\n  \n  return {\n    ...spec,\n    type: 'pie',\n    categoryField: encodes.category || encodes.x || 'category',\n    valueField: encodes.value || encodes.y || 'value',\n    outerRadius: 0.8,\n    innerRadius: 0.5,\n    padAngle: 0.6\n  };\n};","/**\n * DONUT图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { configureLegend } from '../style/Legend';\nimport { configureLabel } from '../style/Label';\nimport { configureTooltip } from '../style/Tooltip';\nimport { initVChartDonut } from '../init/initVChartDonut';\n\n// 创建DONUT图表Pipeline\nexport const createDonutSpecPipeline = () => pipeline([\n  initVChartDonut,\n  initData,\n  configureLegend,\n  configureLabel,\n  configureTooltip\n], {});","/**\n * VTable表格初始化模块\n */\n\nimport { PipelineStep, PipelineContext } from '../../PipelineCore';\n\n// VTable表格初始化\nexport const initVTableList: PipelineStep = (spec: any, context: PipelineContext) => {\n  const { data } = context;\n  \n  // // 根据数据字段生成列配置\n  // const columns: any[] = [];\n  // if (data?.fields) {\n  //   data.fields.forEach((field: any) => {\n  //     if (field.name && !field.name.startsWith('__')) { // 排除内部字段\n  //       columns.push({\n  //         field: field.name,\n  //         title: field.alias || field.name,\n  //         width: 120\n  //       });\n  //     }\n  //   });\n  // }\n\n  return {\n    ...spec,\n    type: 'list-table',\n    // columns,\n    records: data || []\n  };\n};","/**\n * TABLE图表规范生成Pipeline\n */\n\nimport { pipeline } from '../../PipelineCore';\nimport { initData } from '../DataModule';\nimport { initVTableList } from '../init/initVTable';\n\n// 创建TABLE图表Pipeline\nexport const createTableSpecPipeline = () => pipeline([\n  initVTableList,\n  initData\n], {});","/**\n * 图表适配分析器\n * 分析图表类型对维度和指标的要求，并提供重塑策略建议\n */\n\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\nimport { ChartType, ChartDataRequirement, CHART_DATA_REQUIREMENTS } from '../../types/charts';\n\n// 分析结果\nexport interface ChartAnalysisResult {\n  currentStructure: {\n    dimensions: number;\n    measures: number;\n    dimensionNames: string[];\n    measureNames: string[];\n  };\n  targetStructure: ChartDataRequirement;\n}\n\n\n\n// 分析图表数据要求\nexport const analyzeChartRequirements = (\n  chartType: ChartType,\n  dimensions: string[],\n  measures: string[]\n): ChartAnalysisResult => {\n  const requirement = CHART_DATA_REQUIREMENTS[chartType];\n  \n  const currentStructure = {\n    dimensions: dimensions.length,\n    measures: measures.length,\n    dimensionNames: dimensions,\n    measureNames: measures\n  };\n\n  return {\n    currentStructure,\n    targetStructure: requirement\n  };\n};\n\n// 图表适配分析步骤\nexport const chartAdapterStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  const { chartType, fieldSelection } = context;\n  \n\n  // 分析图表要求\n  const analysisResult = analyzeChartRequirements(\n    chartType,\n    fieldSelection.dimensions,\n    fieldSelection.measures\n  );\n\n  // 将分析结果添加到vizSeed\n  return {\n    ...vizSeed,\n    analysisResult\n  };\n};\n\n","/**\n * VizSeed初始化模块\n * 负责创建基础的VizSeed对象结构\n */\n\nimport { encode } from 'punycode';\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\n\n/**\n * VizSeed基础初始化步骤\n * 创建包含5个核心属性的VizSeed对象\n */\nexport const vizSeedInitStep: PipelineStep = (_vizSeed: any, context: PipelineContext) => {\n  const { chartType, encodes, fieldMap, data, visualStyle} = context;\n  \n  return {\n    chartType: chartType,\n    data: data || [], // 初始为空\n    fieldMap: fieldMap || {},\n    encodes: encodes || {},\n    visualStyle: visualStyle || {}\n  };\n};","/**\n * 升维和降维Pipeline子模块工具函数\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../../PipelineCore';\n\n// 获取数据源的辅助函数\nconst getDataSource = (vizSeed: any, context: PipelineContext): any[] => {\n  return context.data || [];\n};\n\n// 获取字段选择的辅助函数\nconst getFieldSelection = (context: PipelineContext): FieldSelection => {\n  return context.fieldSelection || { dimensions: [], measures: [] };\n};\n\n// 更新fieldMap的辅助函数\nconst updateFieldMapAndFieldSelection = (context: PipelineContext, newFieldSelection: FieldSelection) => {\n  if (context.fieldMap) {\n    // 更新fieldMap中的字段位置\n    Object.keys(context.fieldMap).forEach(key => {\n      if (newFieldSelection.dimensions.includes(key)) {\n        context.fieldMap![key].location = 'dimension';\n      } else if (newFieldSelection.measures.includes(key)) {\n        context.fieldMap![key].location = 'measure';\n      }\n    });\n    \n    // 添加新字段（如升维产生的特殊字段）\n    newFieldSelection.dimensions.forEach(dim => {\n      if (!context.fieldMap![dim]) {\n        context.fieldMap![dim] = {\n          id: dim,\n          type: 'string',\n          alias: dim,\n          location: 'dimension'\n        };\n      }\n    });\n    \n    newFieldSelection.measures.forEach(measure => {\n      if (!context.fieldMap![measure]) {\n        context.fieldMap![measure] = {\n          id: measure,\n          type: 'number',\n          alias: measure,\n          location: 'measure'\n        };\n      }\n    });\n  }\n  if(context.fieldSelection){\n    context.fieldSelection = newFieldSelection;\n  }\n};\n\n/**\n * 升维Pipeline子模块：将多指标转为单指标+指标名称维度\n */\nexport const elevateStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  const sourceData = getDataSource(vizSeed,context);\n  const fieldSelection = getFieldSelection(context);\n  \n  if(fieldSelection.measures.length <= 0) {\n    return vizSeed; // 如果没有指标，直接返回\n  }\n  const reshapedRows: any[] = [];\n  const { dimensions, measures } = fieldSelection;\n\n  // 为每个数据行，将多个指标转换为多行数据\n  sourceData.forEach(row => {\n    measures.forEach(measure => {\n      const newRow: any = {};\n      \n      // 复制所有维度字段\n      dimensions.forEach(dim => {\n        newRow[dim] = row[dim];\n      });\n      \n      // 添加特殊字段\n      newRow['__MeasureName__'] = measure;\n      newRow['__MeasureValue__'] = row[measure] || 0;\n      \n      reshapedRows.push(newRow);\n    });\n  });\n\n  // 更新字段选择\n  const newFieldSelection = {\n    dimensions: [...dimensions, '__MeasureName__'],\n    measures: ['__MeasureValue__']\n  };\n  \n  // 更新fieldMap\n  updateFieldMapAndFieldSelection(context, newFieldSelection);\n  \n  // 更新data\n  context.data = reshapedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};\n\n/**\n * 降维Pipeline子模块：将某个维度的值变成指标\n */\nexport const reduceStep: PipelineStep = (vizSeed: any, context: PipelineContext, targetDimension?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否需要降维\n  if (fieldSelection.dimensions.length <= 0) {\n    return vizSeed;\n  }\n\n  const { dimensions, measures } = fieldSelection;\n  const dimToReduce = targetDimension || dimensions[dimensions.length - 1];\n  const remainingDimensions = dimensions.filter(dim => dim !== dimToReduce);\n  \n  // 获取该维度的所有可能值\n  const dimValues = [...new Set(sourceData.map(row => row[dimToReduce]))];\n  \n  // 构建新的数据结构\n  const reshapedRows: any[] = [];\n  \n  // 按剩余维度分组\n  const groupedData = sourceData.reduce((groups, row) => {\n    const groupKey = remainingDimensions.map(dim => row[dim]).join('|');\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(row);\n    return groups;\n  }, {} as Record<string, any[]>);\n\n  // 为每个组创建新的行\n  Object.entries(groupedData).forEach(([, groupRows]) => {\n    const rows = groupRows as any[];\n    const newRow: any = {};\n    \n    // 设置剩余维度的值\n    if (remainingDimensions.length > 0) {\n      const firstRow = rows[0];\n      remainingDimensions.forEach(dim => {\n        newRow[dim] = firstRow[dim];\n      });\n    }\n    \n    // 为每个维度值创建新的指标列\n    dimValues.forEach(dimValue => {\n      const matchingRow = rows.find((row: any) => row[dimToReduce] === dimValue);\n      \n      // 为每个原始指标创建新的列名\n      measures.forEach(measure => {\n        const newColumnName = `${dimValue}_${measure}`;\n        newRow[newColumnName] = matchingRow ? (matchingRow[measure] || 0) : 0;\n      });\n    });\n    \n    reshapedRows.push(newRow);\n  });\n\n  // 生成新的指标列表\n  const newMeasures: string[] = [];\n  dimValues.forEach(dimValue => {\n    measures.forEach(measure => {\n      newMeasures.push(`${dimValue}_${measure}`);\n    });\n  });\n  \n  // 更新字段选择\n  const newFieldSelection = {\n    dimensions: remainingDimensions,\n    measures: newMeasures\n  };\n  \n  // 更新fieldMap\n  updateFieldMapAndFieldSelection(context, newFieldSelection);\n  \n  // 更新data\n  context.data = reshapedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};","/**\n * 维度和指标复制工具模块\n * 提供复制指定维度或指标字段的功能，新字段命名为原字段名_copy\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection, FieldDefinition } from '../../PipelineCore';\n\n// 获取数据源的辅助函数\nconst getDataSource = (vizSeed: any, context: PipelineContext): any[] => {\n  // 优先使用data，如果为空则使用data.rows\n  return context.data;\n};\n\n// 获取字段选择的辅助函数\nconst getFieldSelection = (context: PipelineContext): FieldSelection => {\n  return context.fieldSelection || { dimensions: [], measures: [] };\n};\n\n// 更新fieldMap的辅助函数\nconst updateFieldMapAndFieldSelection = (context: PipelineContext, newFieldSelection: FieldSelection, originalField: FieldDefinition, copiedFieldName: string) => {\n  if (context.fieldMap) {\n    // 添加复制的字段到fieldMap\n    if (!context.fieldMap![copiedFieldName]) {\n      context.fieldMap![copiedFieldName] = {\n        id: copiedFieldName,\n        type: originalField.type,\n        alias: copiedFieldName,\n        location: originalField.location,\n      };\n    }\n  }\n\n  if (context.fieldSelection) {\n    context.fieldSelection = newFieldSelection;\n  }\n};\n\n/**\n * 复制指定维度字段的Pipeline步骤\n * @param vizSeed VizSeed对象\n * @param context Pipeline上下文\n * @param dimensionName 要复制的维度字段名称，如果不指定则复制第一个维度\n */\nexport const copyDimensionStep: PipelineStep = (vizSeed: any, context: PipelineContext, dimensionName?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否有维度可复制\n  if (fieldSelection.dimensions.length === 0) {\n    return vizSeed;\n  }\n  \n  // 确定要复制的维度\n  const targetDimension = dimensionName || fieldSelection.dimensions[0];\n  \n  // 检查目标维度是否存在\n  if (!fieldSelection.dimensions.includes(targetDimension)) {\n    throw new Error(`维度字段 ${targetDimension} 不存在于当前字段选择中`);\n  }\n  \n  const copiedFieldName = `${targetDimension}_copy`;\n  \n  // 复制数据并添加新字段\n  const updatedRows = sourceData.map(row => ({\n    ...row,\n    [copiedFieldName]: row[targetDimension]\n  }));\n  \n  // 更新字段选择，将复制的字段添加到维度列表\n  const newFieldSelection = {\n    dimensions: [...fieldSelection.dimensions, copiedFieldName],\n    measures: [...fieldSelection.measures]\n  };\n  \n  // 获取原字段类型\n  const originalField = context.fieldMap?.[targetDimension];\n  \n  // 更新fieldMap和fieldSelection\n  updateFieldMapAndFieldSelection(context, newFieldSelection, originalField, copiedFieldName);\n  \n  // 更新data\n  context.data = updatedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap,\n    copyInfo: {\n      type: 'dimension',\n      originalField: targetDimension,\n      copiedField: copiedFieldName\n    }\n  };\n};\n\n/**\n * 复制指定指标字段的Pipeline步骤\n * @param vizSeed VizSeed对象\n * @param context Pipeline上下文\n * @param measureName 要复制的指标字段名称，如果不指定则复制第一个指标\n */\nexport const copyMeasureStep: PipelineStep = (vizSeed: any, context: PipelineContext, measureName?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否有指标可复制\n  if (fieldSelection.measures.length === 0) {\n    return vizSeed;\n  }\n  \n  // 确定要复制的指标\n  const targetMeasure = measureName || fieldSelection.measures[0];\n  \n  // 检查目标指标是否存在\n  if (!fieldSelection.measures.includes(targetMeasure)) {\n    throw new Error(`指标字段 ${targetMeasure} 不存在于当前字段选择中`);\n  }\n  \n  const copiedFieldName = `${targetMeasure}_copy`;\n  \n  // 复制数据并添加新字段\n  const updatedRows = sourceData.map(row => ({\n    ...row,\n    [copiedFieldName]: row[targetMeasure]\n  }));\n  \n  // 更新字段选择，将复制的字段添加到指标列表\n  const newFieldSelection = {\n    dimensions: [...fieldSelection.dimensions],\n    measures: [...fieldSelection.measures, copiedFieldName]\n  };\n  \n  // 获取原字段类型\n  const originalField = context.fieldMap?.[targetMeasure];\n  \n  // 更新fieldMap和fieldSelection\n  updateFieldMapAndFieldSelection(context, newFieldSelection, originalField, copiedFieldName);\n  \n  // 更新data\n  context.data = updatedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};","/**\n * 数据重塑模块 - 使用Pipeline子模块实现维度重塑\n * 输入：指标大于等于1，维度大于等于0\n * 输出：维度2，指标1\n * 适用于：饼图、环形图等需要2维1指标的图表\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../../PipelineCore';\nimport { elevateStep, reduceStep } from '../utils/ElevateAndReduce';\nimport { copyDimensionStep } from '../utils/DimensionAndMeasureCopy';\n\n\n\n// elevateStep 和 reduceStep 已从 './utils/ElevateAndReduce' 导入\n\n/**\n * 数据重塑Pipeline步骤 - 使用子模块实现智能重塑\n */\nexport const dataReshapeStep_1M1D1G: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n\n  const targetDims = 2;\n  const targetMeas = 1;\n  \n  // 如果当前结构已经符合要求\n  if (context.fieldSelection.dimensions.length === targetDims && context.fieldSelection.measures.length === targetMeas) {\n    return {\n      ...vizSeed,\n      data: context.data,\n      reshapeInfo: {\n        steps: []\n      }\n    };\n  }\n\n  const operations: string[] = [];\n\n  if(context.fieldSelection.dimensions.length > 0){\n    // 如果维度大于0，使用降维子模块和升维子模块\n\n    let currentDimensionLength = context.fieldSelection.dimensions.length;\n    // 多次降维直到达到目标维度数\n    while (currentDimensionLength > targetDims - 1) {\n      \n      vizSeed = reduceStep(vizSeed, context);\n      \n      // 检查是否实际进行了降维\n      const afterDimensionLength = context.fieldSelection.dimensions.length;\n      if (afterDimensionLength >= currentDimensionLength) {\n        break; // 防止无限循环\n      }\n      \n      currentDimensionLength = afterDimensionLength;\n      operations.push('reduce');\n    }\n\n\n    // 升维子模块\n    if (context.fieldSelection.measures.length >= targetMeas) {\n      vizSeed = elevateStep(vizSeed, context);\n      operations.push('elevate');\n    }\n  }\n  else{\n    // 维度为0的情况：先升维，再复制维度\n    \n    // 第一步：升维 - 将多指标转为单指标+指标名称维度\n    if (context.fieldSelection.measures.length >= targetMeas) {\n      vizSeed = elevateStep(vizSeed, context);\n      operations.push('elevate');\n    }\n    \n    // 第二步：复制维度 - 确保有足够的维度数量\n    if (context.fieldSelection.dimensions.length > 0 && context.fieldSelection.dimensions.length < targetDims) {\n      vizSeed = copyDimensionStep(vizSeed, context);\n      operations.push('copyDimension');\n    }\n  }\n\n  return {\n    ...vizSeed,\n    data: context.data,\n    reshapeInfo: {\n      steps: operations\n    }\n  };\n};\n\n","/**\n * VizSeed清理模块\n * 负责最终清理，确保只保留5个核心属性\n */\n\nimport { theme } from '@visactor/vtable/es/register';\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\nimport { version } from 'os';\nimport { c } from 'vite/dist/node/moduleRunnerTransport.d-DJ_mE5sf';\n\n/**\n * VizSeed最终清理步骤\n * en\n */\nexport const vizSeedCleanupStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  \n  return {\n    chartType: context.chartType,\n    data: context.data,\n    fieldMap: context.fieldMap,\n    encodes: context.encodes,\n    style: context.visualStyle,\n    dimensions: context.fieldSelection?.dimensions,\n    measures: context.fieldSelection?.measures,\n    rowDimensions: context.fieldSelection?.rowDimensions,\n    columnDimensions: context.fieldSelection?.columnDimensions,\n    theme: context.theme,\n    version: context.version\n  };\n};","/**\n * 水平条形图映射策略\n * 功能：x通道使用第一个指标，y通道使用第一个维度，group通道使用第二个维度\n * 适用于：柱状图、条形图等需要横向展示数据的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 水平条形图映射函数\n */\nconst mapHorizontalBarChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    x: measures[0],     // X轴使用第一个指标\n    y: dimensions[0],   // Y轴使用第一个维度\n    group: dimensions[1]  // 分组使用第二个维度（如果有）\n  };\n};\n\n/**\n * 水平条形图通道映射Pipeline步骤\n */\nexport const mapHorizontalBar: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 水平条形图自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用水平条形图映射策略\n  const autoMapping = mapHorizontalBarChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 水平条形图通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * BAR图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep_1M1D1G } from '../dataReshape/DataReshapeModule_1M1D1G';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapHorizontalBar } from '../channelMapping/HorizontalBarMapping';\n\n// 创建BAR图表VizSeed Pipeline\nexport const createBarVizSeedPipeline = () => {\n  const buildBarVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D1G,\n    mapHorizontalBar,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildBarVizSeedSteps, {});\n};","/**\n * 水平条形图映射策略\n * 功能：x通道使用第一个维度，y通道使用第一个指标，group通道使用第二个维度\n * 适用于：条形图等需要横向展示数据的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 水平条形图映射函数\n */\nconst mapVerticalColumnChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    x: dimensions[0],     // X轴使用第一个指标\n    y: measures[0],   // Y轴使用第一个维度\n    group: dimensions[1]  // 分组使用第二个维度（如果有）\n  };\n};\n\n/**\n * 水平条形图通道映射Pipeline步骤\n */\nexport const mapVerticalColumn: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  \n  // 使用水平条形图映射策略\n  const autoMapping = mapVerticalColumnChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * COLUMN图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep_1M1D1G } from '../dataReshape/DataReshapeModule_1M1D1G';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapVerticalColumn } from '../channelMapping/VerticalColumnMapping';\n\n// 创建COLUMN图表VizSeed Pipeline\nexport const createColumnVizSeedPipeline = () => {\n  const buildColumnVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D1G,\n    mapVerticalColumn,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildColumnVizSeedSteps, {});\n};","/**\n * 时间序列映射策略\n * 功能：x通道使用第一个维度（时间轴），y通道使用第一个指标，color通道使用第二个维度或多指标名称\n * 适用于：折线图、面积图等需要展示时间趋势的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 时间序列映射函数\n */\nconst mapTimeSeriesChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    x: dimensions[0],     // X轴使用第一个维度（通常是时间序列）\n    y: measures[0],       // Y轴使用第一个指标\n    color: dimensions[1] || (measures.length > 1 ? '__MeasureName__' : undefined)  // 多系列支持\n  };\n};\n\n/**\n * 时间序列通道映射Pipeline步骤\n */\nexport const mapTimeSeries: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 时间序列自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用时间序列映射策略\n  const autoMapping = mapTimeSeriesChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 时间序列通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * LINE图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep_1M1D1G } from '../dataReshape/DataReshapeModule_1M1D1G';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapTimeSeries } from '../channelMapping/TimeSeriesMapping';\n\n// 创建LINE图表VizSeed Pipeline\nexport const createLineVizSeedPipeline = () => {\n  const buildLineVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D1G,\n    mapTimeSeries,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildLineVizSeedSteps, {});\n};","/**\n * AREA图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep_1M1D1G } from '../dataReshape/DataReshapeModule_1M1D1G';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapTimeSeries } from '../channelMapping/TimeSeriesMapping';\n\n// 创建AREA图表VizSeed Pipeline\nexport const createAreaVizSeedPipeline = () => {\n  const buildAreaVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D1G,\n    mapTimeSeries,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildAreaVizSeedSteps, {});\n};","/**\n * 数据重塑模块 - 使用Pipeline子模块实现维度重塑\n * 基于fieldMap和图表要求，在pipeline中修改数据结构\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../PipelineCore';\nimport { CHART_DATA_REQUIREMENTS } from '../../types/charts';\nimport { elevateStep, reduceStep } from './utils/ElevateAndReduce';\nimport { copyDimensionStep } from './utils/DimensionAndMeasureCopy';\n\n\n\n// 获取字段选择的辅助函数（仅本模块使用）\nconst getFieldSelection = (context: PipelineContext): FieldSelection => {\n  return context.fieldSelection;\n};\n\n// elevateStep 和 reduceStep 已从 './utils/ElevateAndReduce' 导入\n\n/**\n * 数据重塑Pipeline步骤 - 使用子模块实现智能重塑\n */\nexport const dataReshapeStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  const { data, chartType, fieldSelection} = context;\n  \n  if (!data || !chartType) {\n    return vizSeed;\n  }\n\n  \n  // 获取图表要求\n  const requirement = CHART_DATA_REQUIREMENTS[chartType as keyof typeof CHART_DATA_REQUIREMENTS];\n  \n  if (!requirement) {\n    return {\n      ...vizSeed,\n      data: context.data,\n      reshapeInfo: {\n        reshapeType: 'none',\n        reason: '未找到图表类型的数据要求'\n      }\n    };\n  }\n\n  let currentDims = fieldSelection.dimensions.length;\n  let currentMeas = fieldSelection.measures.length;\n  const targetDims = requirement.idealDimensions;\n  const targetMeas = requirement.idealMeasures;\n  \n  // 如果当前结构已经符合要求\n  if (currentDims === targetDims && currentMeas === targetMeas) {\n    return {\n      ...vizSeed,\n      data: context.data,\n      reshapeInfo: {\n        reshapeType: 'none'\n      }\n    };\n  }\n\n  const operations: string[] = [];\n\n  // 步骤1: 如果维度过多，使用降维子模块\n  if (currentDims > targetDims) {\n    let currentFieldSelection = getFieldSelection(context);\n    \n    // 多次降维直到达到目标维度数\n    while (currentFieldSelection.dimensions.length > targetDims) {\n      const beforeLength = currentFieldSelection.dimensions.length;\n      vizSeed = reduceStep(vizSeed, context);\n      \n      // 检查是否实际进行了降维\n      const afterFieldSelection = getFieldSelection(context);\n      if (afterFieldSelection.dimensions.length >= beforeLength) {\n        break; // 防止无限循环\n      }\n      \n      currentFieldSelection = afterFieldSelection;\n      operations.push('reduce');\n    }\n  }\n\n  // 步骤2: 如果指标过多，使用升维子模块\n  const finalFieldSelection = getFieldSelection(context);\n  if (finalFieldSelection.measures.length > targetMeas) {\n    vizSeed = elevateStep(vizSeed, context);\n    operations.push('elevate');\n  }\n\n  // 设置重塑信息\n  const finalReshapeType = operations.length === 1 ? \n    (operations[0] as 'elevate' | 'reduce') : \n    (operations.length > 1 ? 'composite' : 'none');\n\n  return {\n    ...vizSeed,\n    data: context.data,\n    reshapeInfo: {\n      strategy: `${currentDims}维度${currentMeas}指标 → ${targetDims}维度${targetMeas}指标`,\n      steps: operations,\n      reshapeType: finalReshapeType\n    }\n  };\n};\n\n","/**\n * 双指标映射策略\n * 功能：x通道使用第一个指标，y通道使用第二个指标，color通道使用第一个维度\n * 适用于：散点图等需要比较两个指标关系的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 双指标映射函数\n */\nconst mapTwoMeasuresChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    x: measures[0],       // X轴使用第一个指标\n    y: measures[1],       // Y轴使用第二个指标\n    color: dimensions[0]  // 颜色使用第一个维度\n  };\n};\n\n/**\n * 双指标通道映射Pipeline步骤\n */\nexport const mapTwoMeasures: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 双指标自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用双指标映射策略\n  const autoMapping = mapTwoMeasuresChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 双指标通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * SCATTER图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep } from '../DataReshapeModule';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapTwoMeasures } from '../channelMapping/TwoMeasureMapping';\n\n// 创建SCATTER图表VizSeed Pipeline\nexport const createScatterVizSeedPipeline = () => {\n  const buildScatterVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep,\n    mapTwoMeasures,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildScatterVizSeedSteps, {});\n};","/**\n * 类别-数值映射策略\n * 功能：category通道使用第一个维度，value通道使用第一个指标\n * 适用于：饼图、环形图等需要分类展示数值的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 类别-数值映射函数\n */\nconst mapCategoryValueChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    category: dimensions[0] || '__MeasureName__',  // 第一个维度，或升维后的指标名称\n    value: measures[0] || '__MeasureValue__'       // 第一个指标，或升维后的指标值\n  };\n};\n\n/**\n * 类别-数值通道映射Pipeline步骤\n */\nexport const mapCategoryValue: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 类别-数值自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用类别-数值映射策略\n  const autoMapping = mapCategoryValueChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 类别-数值通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * 数据重塑模块 - 使用Pipeline子模块实现维度重塑\n * 输入：指标大于等于1，维度大于等于0\n * 输出：维度1，指标1\n * 适用于：饼图、环形图等需要1维1指标的图表\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../../PipelineCore';\nimport { elevateStep, reduceStep } from '../utils/ElevateAndReduce';\nimport { copyDimensionStep } from '../utils/DimensionAndMeasureCopy';\n\n\n\n// elevateStep 和 reduceStep 已从 './utils/ElevateAndReduce' 导入\n\n/**\n * 数据重塑Pipeline步骤 - 使用子模块实现智能重塑\n */\nexport const dataReshapeStep_1M1D: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n\n  const targetDims = 1;\n  const targetMeas = 1;\n  \n  // 如果当前结构已经符合要求\n  if (context.fieldSelection.dimensions.length === targetDims && context.fieldSelection.measures.length === targetMeas) {\n    return {\n      ...vizSeed,\n      data: context.data,\n      reshapeInfo: {\n        steps: []\n      }\n    };\n  }\n\n  const operations: string[] = [];\n\n\n\n  let currentDimensionLength = context.fieldSelection.dimensions.length;\n  // 多次降维直到达到目标维度数\n  while (currentDimensionLength > targetDims - 1) {\n    \n    vizSeed = reduceStep(vizSeed, context);\n    \n    // 检查是否实际进行了降维\n    const afterDimensionLength = context.fieldSelection.dimensions.length;\n    if (afterDimensionLength >= currentDimensionLength) {\n      break; // 防止无限循环\n    }\n    \n    currentDimensionLength = afterDimensionLength;\n    operations.push('reduce');\n  }\n\n\n  // 升维子模块\n  if (context.fieldSelection.measures.length >= targetMeas) {\n    vizSeed = elevateStep(vizSeed, context);\n    operations.push('elevate');\n  }\n\n\n  return {\n    ...vizSeed,\n    data: context.data,\n    reshapeInfo: {\n      steps: operations\n    }\n  };\n};\n\n","/**\n * PIE图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapCategoryValue } from '../channelMapping/CategoryValueMapping';\nimport { dataReshapeStep_1M1D } from '../dataReshape/DataReshapeModule_1M1D';\n\n// 创建PIE图表VizSeed Pipeline\nexport const createPieVizSeedPipeline = () => {\n  const buildPieVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D,\n    mapCategoryValue,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildPieVizSeedSteps, {});\n};","/**\n * DONUT图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapCategoryValue } from '../channelMapping/CategoryValueMapping';\nimport { dataReshapeStep_1M1D } from '../dataReshape/DataReshapeModule_1M1D';\n\n// 创建DONUT图表VizSeed Pipeline\nexport const createDonutVizSeedPipeline = () => {\n  const buildDonutVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep_1M1D,\n    mapCategoryValue,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildDonutVizSeedSteps, {});\n};","/**\n * 表格行列映射策略\n * 功能：rowDimension通道使用第一个维度，columnDimension通道使用第二个维度，measure通道使用第一个指标\n * 适用于：表格、透视表等需要行列展示的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 表格行列映射函数\n */\nconst mapTableRowColumnChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    rowDimension: dimensions[0],      // 行维度\n    columnDimension: dimensions[1],   // 列维度\n    measure: measures[0]              // 指标字段\n  };\n};\n\n/**\n * 表格行列通道映射Pipeline步骤\n */\nexport const mapTableRowColumn: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 表格行列自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用表格行列映射策略\n  const autoMapping = mapTableRowColumnChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 表格行列通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * TABLE图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep } from '../DataReshapeModule';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapTableRowColumn } from '../channelMapping/TableRowColumnMapping';\n\n// 创建TABLE图表VizSeed Pipeline\nexport const createTableVizSeedPipeline = () => {\n  const buildTableVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep,\n    mapTableRowColumn,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildTableVizSeedSteps, {});\n};","/**\n * Pipeline注册表\n * 使用函数映射实现图表Pipeline管理，简洁高效的架构\n */\n\nimport { PipelineContext } from './PipelineCore';\nimport { ChartType } from '../types/charts';\n\n// 静态导入所有spec pipelines\nimport * as SpecPipelines from './spec/specPipelines';\n\n// 静态导入所有vizSeed pipelines  \nimport * as VizSeedPipelines from './vizSeed/vizSeedPipelines';\n\n\n// 规范生成Pipeline映射表 - 每个图表类型使用专门的Pipeline\nconst specPipelineMap: Record<string, () => any> = {\n  // VChart基础图表类型\n  [ChartType.BAR]: SpecPipelines.createBarSpecPipeline,\n  [ChartType.BAR_STACKED]: SpecPipelines.createBarStackedSpecPipeline,\n  [ChartType.BAR_GROUPED]: SpecPipelines.createBarGroupedSpecPipeline,\n  [ChartType.BAR_PERCENT]: SpecPipelines.createBarPercentSpecPipeline,\n  [ChartType.COLUMN]: SpecPipelines.createColumnSpecPipeline,\n  [ChartType.COLUMN_STACKED]: SpecPipelines.createColumnStackedSpecPipeline,\n  [ChartType.COLUMN_GROUPED]: SpecPipelines.createColumnGroupedSpecPipeline,\n  [ChartType.COLUMN_PERCENT]: SpecPipelines.createColumnPercentSpecPipeline,\n  [ChartType.LINE]: SpecPipelines.createLineSpecPipeline,\n  [ChartType.AREA]: SpecPipelines.createAreaSpecPipeline,\n  [ChartType.AREA_STACKED]: SpecPipelines.createAreaStackedSpecPipeline,\n  [ChartType.AREA_PERCENT]: SpecPipelines.createAreaPercentSpecPipeline,\n  [ChartType.SCATTER]: SpecPipelines.createScatterSpecPipeline,\n  \n  // VChart饼图类型\n  [ChartType.PIE]: SpecPipelines.createPieSpecPipeline,\n  [ChartType.DONUT]: SpecPipelines.createDonutSpecPipeline,\n  \n  // VTable表格类型\n  [ChartType.TABLE]: SpecPipelines.createTableSpecPipeline\n};\n\n// VizSeed构建Pipeline映射表 - 每个图表类型使用专门的Pipeline\nconst vizSeedPipelineMap: Record<string, () => any> = {\n  // VChart基础图表类型\n  [ChartType.BAR]: VizSeedPipelines.createBarVizSeedPipeline,\n  [ChartType.BAR_STACKED]: VizSeedPipelines.createBarVizSeedPipeline,\n  [ChartType.BAR_GROUPED]: VizSeedPipelines.createBarVizSeedPipeline,\n  [ChartType.BAR_PERCENT]: VizSeedPipelines.createBarVizSeedPipeline,\n  [ChartType.COLUMN]: VizSeedPipelines.createColumnVizSeedPipeline,\n  [ChartType.COLUMN_STACKED]: VizSeedPipelines.createColumnVizSeedPipeline,\n  [ChartType.COLUMN_GROUPED]: VizSeedPipelines.createColumnVizSeedPipeline,\n  [ChartType.COLUMN_PERCENT]: VizSeedPipelines.createColumnVizSeedPipeline,\n  [ChartType.LINE]: VizSeedPipelines.createLineVizSeedPipeline,\n  [ChartType.AREA]: VizSeedPipelines.createAreaVizSeedPipeline,\n  [ChartType.AREA_STACKED]: VizSeedPipelines.createAreaVizSeedPipeline,\n  [ChartType.AREA_PERCENT]: VizSeedPipelines.createAreaVizSeedPipeline,\n  [ChartType.SCATTER]: VizSeedPipelines.createScatterVizSeedPipeline,\n  \n  // VChart饼图类型\n  [ChartType.PIE]: VizSeedPipelines.createPieVizSeedPipeline,\n  [ChartType.DONUT]: VizSeedPipelines.createDonutVizSeedPipeline,\n  \n  // VTable表格类型\n  [ChartType.TABLE]: VizSeedPipelines.createTableVizSeedPipeline\n};\n\n// 简化的构建规范函数 - 同步版本\nexport const buildSpec = (chartType: string, context: PipelineContext): any => {\n  const selectedPipeline = specPipelineMap[chartType];\n  \n  if (!selectedPipeline) {\n    throw new Error(`不支持的图表类型: ${chartType}`);\n  }\n  \n  try {\n    return selectedPipeline()(context);\n  } catch (error) {\n    throw new Error(`加载图表类型 ${chartType} 失败: ${error}`);\n  }\n};\n\n// 构建VizSeed对象的函数 - 同步版本\nexport const buildVizSeed = (chartType: string, context: PipelineContext): any => {\n  const vizSeedPipeline = vizSeedPipelineMap[chartType];\n  \n  if (!vizSeedPipeline) {\n    throw new Error(`不支持的VizSeed图表类型: ${chartType}`);\n  }\n  \n  try {\n    return vizSeedPipeline()(context);\n  } catch (error) {\n    throw new Error(`加载VizSeed图表类型 ${chartType} 失败: ${error}`);\n  }\n};\n\n// 获取所有支持的pipeline类型\nexport const getSupportedPipelineTypes = (): string[] => {\n  return [...Object.keys(specPipelineMap), ...Object.keys(vizSeedPipelineMap)];\n};\n\n// 检查pipeline是否支持\nexport const isPipelineSupported = (key: ChartType): boolean => {\n  return key in specPipelineMap || key in vizSeedPipelineMap;\n};","const isSymbol = (value) => {\n  return !!value && value.constructor === Symbol;\n};\nconst isArray = Array.isArray;\nconst isObject = (value) => {\n  return !!value && value.constructor === Object;\n};\nconst isPrimitive = (value) => {\n  return value === void 0 || value === null || typeof value !== \"object\" && typeof value !== \"function\";\n};\nconst isFunction = (value) => {\n  return !!(value && value.constructor && value.call && value.apply);\n};\nconst isString = (value) => {\n  return typeof value === \"string\" || value instanceof String;\n};\nconst isInt = (value) => {\n  return isNumber(value) && value % 1 === 0;\n};\nconst isFloat = (value) => {\n  return isNumber(value) && value % 1 !== 0;\n};\nconst isNumber = (value) => {\n  try {\n    return Number(value) === value;\n  } catch {\n    return false;\n  }\n};\nconst isDate = (value) => {\n  return Object.prototype.toString.call(value) === \"[object Date]\";\n};\nconst isPromise = (value) => {\n  if (!value)\n    return false;\n  if (!value.then)\n    return false;\n  if (!isFunction(value.then))\n    return false;\n  return true;\n};\nconst isEmpty = (value) => {\n  if (value === true || value === false)\n    return true;\n  if (value === null || value === void 0)\n    return true;\n  if (isNumber(value))\n    return value === 0;\n  if (isDate(value))\n    return isNaN(value.getTime());\n  if (isFunction(value))\n    return false;\n  if (isSymbol(value))\n    return false;\n  const length = value.length;\n  if (isNumber(length))\n    return length === 0;\n  const size = value.size;\n  if (isNumber(size))\n    return size === 0;\n  const keys = Object.keys(value).length;\n  return keys === 0;\n};\nconst isEqual = (x, y) => {\n  if (Object.is(x, y))\n    return true;\n  if (x instanceof Date && y instanceof Date) {\n    return x.getTime() === y.getTime();\n  }\n  if (x instanceof RegExp && y instanceof RegExp) {\n    return x.toString() === y.toString();\n  }\n  if (typeof x !== \"object\" || x === null || typeof y !== \"object\" || y === null) {\n    return false;\n  }\n  const keysX = Reflect.ownKeys(x);\n  const keysY = Reflect.ownKeys(y);\n  if (keysX.length !== keysY.length)\n    return false;\n  for (let i = 0; i < keysX.length; i++) {\n    if (!Reflect.has(y, keysX[i]))\n      return false;\n    if (!isEqual(x[keysX[i]], y[keysX[i]]))\n      return false;\n  }\n  return true;\n};\n\nexport { isArray, isDate, isEmpty, isEqual, isFloat, isFunction, isInt, isNumber, isObject, isPrimitive, isPromise, isString, isSymbol };\n//# sourceMappingURL=typed.mjs.map\n","import { objectify } from './array.mjs';\nimport { isPrimitive, isObject, isArray } from './typed.mjs';\n\nconst shake = (obj, filter = (x) => x === void 0) => {\n  if (!obj)\n    return {};\n  const keys2 = Object.keys(obj);\n  return keys2.reduce((acc, key) => {\n    if (filter(obj[key])) {\n      return acc;\n    } else {\n      acc[key] = obj[key];\n      return acc;\n    }\n  }, {});\n};\nconst mapKeys = (obj, mapFunc) => {\n  const keys2 = Object.keys(obj);\n  return keys2.reduce((acc, key) => {\n    acc[mapFunc(key, obj[key])] = obj[key];\n    return acc;\n  }, {});\n};\nconst mapValues = (obj, mapFunc) => {\n  const keys2 = Object.keys(obj);\n  return keys2.reduce((acc, key) => {\n    acc[key] = mapFunc(obj[key], key);\n    return acc;\n  }, {});\n};\nconst mapEntries = (obj, toEntry) => {\n  if (!obj)\n    return {};\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    const [newKey, newValue] = toEntry(key, value);\n    acc[newKey] = newValue;\n    return acc;\n  }, {});\n};\nconst invert = (obj) => {\n  if (!obj)\n    return {};\n  const keys2 = Object.keys(obj);\n  return keys2.reduce((acc, key) => {\n    acc[obj[key]] = key;\n    return acc;\n  }, {});\n};\nconst lowerize = (obj) => mapKeys(obj, (k) => k.toLowerCase());\nconst upperize = (obj) => mapKeys(obj, (k) => k.toUpperCase());\nconst clone = (obj) => {\n  if (isPrimitive(obj)) {\n    return obj;\n  }\n  if (typeof obj === \"function\") {\n    return obj.bind({});\n  }\n  const newObj = new obj.constructor();\n  Object.getOwnPropertyNames(obj).forEach((prop) => {\n    newObj[prop] = obj[prop];\n  });\n  return newObj;\n};\nconst listify = (obj, toItem) => {\n  if (!obj)\n    return [];\n  const entries = Object.entries(obj);\n  if (entries.length === 0)\n    return [];\n  return entries.reduce((acc, entry) => {\n    acc.push(toItem(entry[0], entry[1]));\n    return acc;\n  }, []);\n};\nconst pick = (obj, keys2) => {\n  if (!obj)\n    return {};\n  return keys2.reduce((acc, key) => {\n    if (Object.prototype.hasOwnProperty.call(obj, key))\n      acc[key] = obj[key];\n    return acc;\n  }, {});\n};\nconst omit = (obj, keys2) => {\n  if (!obj)\n    return {};\n  if (!keys2 || keys2.length === 0)\n    return obj;\n  return keys2.reduce(\n    (acc, key) => {\n      delete acc[key];\n      return acc;\n    },\n    { ...obj }\n  );\n};\nconst get = (value, path, defaultValue) => {\n  const segments = path.split(/[\\.\\[\\]]/g);\n  let current = value;\n  for (const key of segments) {\n    if (current === null)\n      return defaultValue;\n    if (current === void 0)\n      return defaultValue;\n    const dequoted = key.replace(/['\"]/g, \"\");\n    if (dequoted.trim() === \"\")\n      continue;\n    current = current[dequoted];\n  }\n  if (current === void 0)\n    return defaultValue;\n  return current;\n};\nconst set = (initial, path, value) => {\n  if (!initial)\n    return {};\n  if (!path || value === void 0)\n    return initial;\n  const segments = path.split(/[\\.\\[\\]]/g).filter((x) => !!x.trim());\n  const _set = (node) => {\n    if (segments.length > 1) {\n      const key = segments.shift();\n      const nextIsNum = /^\\d+$/.test(segments[0]);\n      node[key] = node[key] === void 0 ? nextIsNum ? [] : {} : node[key];\n      _set(node[key]);\n    } else {\n      node[segments[0]] = value;\n    }\n  };\n  const cloned = clone(initial);\n  _set(cloned);\n  return cloned;\n};\nconst assign = (initial, override) => {\n  if (!initial || !override)\n    return initial ?? override ?? {};\n  return Object.entries({ ...initial, ...override }).reduce(\n    (acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: (() => {\n          if (isObject(initial[key]))\n            return assign(initial[key], value);\n          return value;\n        })()\n      };\n    },\n    {}\n  );\n};\nconst keys = (value) => {\n  if (!value)\n    return [];\n  const getKeys = (nested, paths) => {\n    if (isObject(nested)) {\n      return Object.entries(nested).flatMap(\n        ([k, v]) => getKeys(v, [...paths, k])\n      );\n    }\n    if (isArray(nested)) {\n      return nested.flatMap((item, i) => getKeys(item, [...paths, `${i}`]));\n    }\n    return [paths.join(\".\")];\n  };\n  return getKeys(value, []);\n};\nconst crush = (value) => {\n  if (!value)\n    return {};\n  return objectify(\n    keys(value),\n    (k) => k,\n    (k) => get(value, k)\n  );\n};\nconst construct = (obj) => {\n  if (!obj)\n    return {};\n  return Object.keys(obj).reduce((acc, path) => {\n    return set(acc, path, obj[path]);\n  }, {});\n};\n\nexport { assign, clone, construct, crush, get, invert, keys, listify, lowerize, mapEntries, mapKeys, mapValues, omit, pick, set, shake, upperize };\n//# sourceMappingURL=object.mjs.map\n","import { VizSeedBuilder as IVizSeedBuilder, ChartSpec, NestedMeasure } from '../types';\nimport { DataSet as IDataSet, FieldInferenceOptions } from '../types/data';\nimport { ChartType, ChannelMapping, CHART_DATA_REQUIREMENTS, parseChartType } from '../types/charts';\n// VizSeedDSL类已不再使用，改为函数式pipeline构建\nimport { DataSet } from '../datasets/DataSet';\nimport { PipelineContext, FieldMap, FieldSelection } from '../pipeline/PipelineCore';\nimport { buildSpec, buildVizSeed } from '../pipeline/PipelineRegistry';\nimport { assign } from 'radash';\n\nexport class VizSeedBuilder implements IVizSeedBuilder {\n  private dataset: IDataSet;\n  private fieldSelection: FieldSelection = {\n    dimensions: [],\n    measures: [],\n    groupMeasure: [],\n    rowDimensions: [],\n    columnDimensions: []\n  };\n  private fieldMap: FieldMap = {};\n  private data: Record<string, any>[] = []; // 新增data\n  private chartType: ChartType = ChartType.BAR;\n  private encodes: ChannelMapping[] = [];\n  private visualStyle = {\n    title: '',\n    color: {\n      colors: [] as Array<{id: string, name: string, value: string}>\n    },\n    legend: {\n      enable: true,\n      position: '',\n    },\n    label: {\n      enable: true,\n    },\n    tooltip: {\n      enable: true,\n    },\n    animation: {\n      enable: true,\n    },\n    responsive: {\n      widthMode: 'standard' as 'standard' | 'adaptive',\n      heightMode: 'adaptive' as 'standard' | 'adaptive',\n    },\n    yAxis: {},\n    xAxis: {},\n    columnStack: {\n      stackRadius: 5,\n    },\n    pie: {},\n    pivotPie: {},\n    doughnut: {},\n    line: {\n      lineStyle: {},\n    }\n  };\n  private theme: 'light' | 'dark' | 'custom' = 'light'; // 默认主题\n  private version: string = '1.0.0'; // 默认版本信息\n  private vizSeedDSL: any | null = null; // 缓存构建结果\n  \n\n  // 构造函数重载：支持直接传入rows或DataSet\n  constructor(rows: Record<string, any>[], options?: FieldInferenceOptions);\n  constructor(dataset: IDataSet);\n  constructor(\n    dataOrRows: IDataSet | Record<string, any>[], \n    options?: FieldInferenceOptions\n  ) {\n    if (Array.isArray(dataOrRows)) {\n      // 直接传入rows数组的情况\n      this.dataset = new DataSet(dataOrRows, options);\n    } else {\n      // 传入DataSet对象的情况\n      this.dataset = dataOrRows;\n    }\n    \n  }\n  \n  // 根据字段名从DataSet创建字段定义\n  private createFieldDefinition(fieldName: string): any {\n    const field = this.dataset.fields.find(f => f.name === fieldName);\n    if (!field) {\n      throw new Error(`字段 ${fieldName} 不存在于数据集中`);\n    }\n    \n    return {\n      id: field.name,\n      type: field.type,\n      alias: field.name, // 默认使用字段名作为别名\n      location: field.role,\n      domain: this.extractFieldDomain(field.name),\n      format: {}\n    };\n  }\n  \n  // 提取字段的域值\n  private extractFieldDomain(fieldName: string): any[] {\n    const values = this.dataset.rows.map(row => row[fieldName]);\n    return [...new Set(values)].slice(0, 10); // 最多10个示例值\n  }\n  \n  // 将字段添加到fieldMap中\n  private addFieldToMap(fieldName: string): void {\n    if (!this.fieldMap[fieldName]) {\n      this.fieldMap[fieldName] = this.createFieldDefinition(fieldName);\n    }\n  }\n\n  // 静态方法：从VizSeed DSL对象创建Builder\n  public static from(vizSeedDSL: any): VizSeedBuilder {\n    // 深拷贝整个vizSeedDSL对象\n    const clonedDSL = JSON.parse(JSON.stringify(vizSeedDSL));\n    \n    // 从DSL数据创建Builder实例\n    const builder = new VizSeedBuilder(clonedDSL.data || []);\n    \n    // 直接设置缓存的vizSeedDSL\n    builder.vizSeedDSL = clonedDSL;\n    \n    return builder;\n  }\n\n  // 获取数据集信息\n  public getDataSet(): IDataSet {\n    return this.dataset;\n  }\n\n  // 获取所有可用字段（从 DataSet）\n  public getAvailableFields(): string[] {\n    return this.dataset.fields.map(f => f.name);\n  }\n\n  // 获取可用维度字段（从 DataSet）\n  public getAvailableDimensions(): string[] {\n    return this.dataset.fields.filter(f => f.role === 'dimension').map(f => f.name);\n  }\n\n  // 获取可用指标字段（从 DataSet）\n  public getAvailableMeasures(): string[] {\n    return this.dataset.fields.filter(f => f.role === 'measure').map(f => f.name);\n  }\n  \n  // 获取当前选中的字段（从 fieldMap）\n  public getSelectedFields(): string[] {\n    return Object.keys(this.fieldMap);\n  }\n\n  // 字段选择API - 选择同时自动添加到fieldMap和更新data\n  public setDimensions(dimensions: string[]): VizSeedBuilder {\n    this.fieldSelection.dimensions = [...dimensions];\n    // 将选中的维度字段添加到fieldMap\n    dimensions.forEach(dim => this.addFieldToMap(dim));\n    // 更新data以包含选定字段的数据\n    this.updateDataMap();\n    return this;\n  }\n\n  public setMeasures(measures: NestedMeasure<string>[]): VizSeedBuilder {\n    let flattenedMeasures = measures.flat(5) as string[];\n    this.fieldSelection.measures = flattenedMeasures; // 扁平化嵌套的指标数组\n    this.fieldSelection.groupMeasure = measures;\n    // 将选中的指标字段添加到fieldMap\n    flattenedMeasures.forEach(flattenedMeasures => this.addFieldToMap(flattenedMeasures));\n    // 更新data以包含选定字段的数据\n    this.updateDataMap();\n    return this;\n  }\n\n  public addDimensionToArray(dimension: string): VizSeedBuilder {\n    if (!this.fieldSelection.dimensions.includes(dimension)) {\n      this.fieldSelection.dimensions.push(dimension);\n      // 添加到fieldMap\n      this.addFieldToMap(dimension);\n      // 更新data\n      this.updateDataMap();\n    }\n    return this;\n  }\n\n  public addMeasureToArray(measure: string): VizSeedBuilder {\n    if (!this.fieldSelection.measures.includes(measure)) {\n      this.fieldSelection.measures.push(measure);\n      // 添加到fieldMap\n      this.addFieldToMap(measure);\n      // 更新data\n      this.updateDataMap();\n    }\n    return this;\n  }\n\n  public getDimensions(): string[] {\n    return [...this.fieldSelection.dimensions];\n  }\n\n  public getMeasures(): string[] {\n    return [...this.fieldSelection.measures];\n  }\n\n  // FieldMap相关API\n  public getFieldMap(): FieldMap {\n    return { ...this.fieldMap };\n  }\n\n  public setFieldMap(fieldMap: FieldMap): VizSeedBuilder {\n    this.fieldMap = { ...fieldMap };\n    return this;\n  }\n  \n  public getFieldSelection(): FieldSelection {\n    return { ...this.fieldSelection };\n  }\n\n  public setFieldSelection(fieldSelection: FieldSelection): VizSeedBuilder {\n    this.fieldSelection = { ...fieldSelection };\n    return this;\n  }\n  \n  // 更新字段别名\n  public setFieldAlias(fieldId: string, alias: string): VizSeedBuilder {\n    const field = this.fieldMap[fieldId];\n    if (field) {\n      field.alias = alias;\n    } else if (this.hasField(fieldId)) {\n      // 如果字段存在于DataSet但不在fieldMap中，先添加再设置别名\n      this.addFieldToMap(fieldId);\n      const newField = this.fieldMap[fieldId];\n      if (newField) {\n        newField.alias = alias;\n      }\n    } else {\n      throw new Error(`字段 ${fieldId} 不存在于数据集中`);\n    }\n    return this;\n  }\n  \n  // 获取所有可用字段名称（从 DataSet）\n  public getAvailableFieldNames(): string[] {\n    return this.dataset.fields.map(f => f.name);\n  }\n  \n  // 检查字段是否存在\n  public hasField(fieldName: string): boolean {\n    return this.dataset.fields.some(f => f.name === fieldName);\n  }\n\n  // 更新data以包含选定字段的数据\n  private updateDataMap(): void {\n    const selectedFields = [...this.fieldSelection.dimensions, ...this.fieldSelection.measures];\n    \n    // 过滤数据只包含选中的字段\n    this.data = this.dataset.rows.map(row => {\n      const filteredRow: Record<string, any> = {};\n      selectedFields.forEach(field => {\n        if (row.hasOwnProperty(field)) {\n          filteredRow[field] = row[field];\n        }\n      });\n      return filteredRow;\n    });\n  }\n\n\n\n  // 重载：支持字符串和枚举两种输入方式\n  public setChartType(type: string): VizSeedBuilder;\n  public setChartType(type: ChartType): VizSeedBuilder;\n  public setChartType(type: string | ChartType): VizSeedBuilder {\n    let chartType: ChartType;\n    \n    if (typeof type === 'string') {\n      // 使用Zod转换字符串为枚举\n      try {\n        chartType = parseChartType(type);\n      } catch (error) {\n        throw new Error(`不支持的图表类型: '${type}'. 支持的类型: bar, bar_stacked, bar_grouped, bar_percent, column, line, area, scatter, pie, donut, table`);\n      }\n    } else {\n      chartType = type;\n    }\n    \n    if (!CHART_DATA_REQUIREMENTS[chartType]) {\n      throw new Error(`不支持的图表类型: ${chartType}`);\n    }\n    \n    this.chartType = chartType;\n    return this;\n  }\n\n  // 所有视觉通道设置方法已删除 - 现在使用自动通道映射\n\n\n  public setTitle(title: string): VizSeedBuilder {\n    this.visualStyle.title = title;\n    return this;\n  }\n\n  public setLegend(visible: boolean = true): VizSeedBuilder {\n    this.visualStyle.legend.enable = visible;\n    return this;\n  }\n\n  public setLabel(visible: boolean = true): VizSeedBuilder {\n    this.visualStyle.label.enable = visible;\n    return this;\n  }\n\n  public setTooltip(visible: boolean = true): VizSeedBuilder {\n    this.visualStyle.tooltip.enable = visible;\n    return this;\n  }\n\n  public setStyle(styleOptions: any): VizSeedBuilder {\n    // 使用radash的assign进行深度合并，数组会被直接替换而不是合并\n    this.visualStyle = assign(this.visualStyle, styleOptions);\n    return this;\n  }\n\n  public build(): any {\n    // 如果已经缓存了结果，直接返回\n    if (this.vizSeedDSL) {\n      return this.vizSeedDSL;\n    }\n    \n    // 强化前置验证 - 要求用户必须设置足够的字段\n    this.validateFieldRequirements();\n    \n    // 使用简化的Pipeline构建VizSeed对象\n    const context: PipelineContext = {\n      chartType: this.chartType, // 图表类型\n      encodes: this.encodes, // 映射通道配置\n      fieldMap: this.fieldMap,\n      fieldSelection: this.fieldSelection,\n      data: this.data,\n      visualStyle: this.visualStyle,\n      theme: this.theme,\n      version: this.version\n    };\n\n    // 构建并缓存结果\n    this.vizSeedDSL = buildVizSeed(context.chartType, context);\n    return this.vizSeedDSL;\n  }\n\n  public buildSpec(): ChartSpec {\n    \n    try {\n      // 确保已构建vizSeedDSL\n      if (!this.vizSeedDSL) {\n        this.build();\n      }\n      \n      // 直接使用缓存的vizSeedDSL作为规范上下文\n      const specContext: PipelineContext = {\n        chartType: this.vizSeedDSL.chartType, // 图表类型\n        encodes: this.vizSeedDSL.encodes, // 映射通道配置\n        fieldMap: this.vizSeedDSL.fieldMap,\n        fieldSelection: {\n          dimensions: this.vizSeedDSL.dimensions,\n          measures: this.vizSeedDSL.measures,\n          groupMeasure: this.vizSeedDSL.groupMeasure,\n          rowDimensions: this.vizSeedDSL.rowDimensions ,\n          columnDimensions: this.vizSeedDSL.columnDimensions\n        },\n        data: this.vizSeedDSL.data,\n        visualStyle: this.vizSeedDSL.style,\n        theme: this.vizSeedDSL.theme,\n        version: this.vizSeedDSL.version\n      };\n\n      // 使用简化的pipeline构建规范\n      return buildSpec(specContext.chartType, specContext);\n    } catch (error: any) {\n      throw new Error(`构建图表规范失败: ${error.message}`);\n    }\n  }\n\n\n  private validateFieldRequirements(): void {\n    if (!this.chartType) {\n      throw new Error('图表类型未设置，请先调用 setChartType()');\n    }\n    \n    const chartType = this.chartType;\n    const { dimensions, measures } = this.fieldSelection;\n    const totalFields = dimensions.length + measures.length;\n    \n    // 检查用户是否设置了字段\n    if (totalFields === 0) {\n      throw new Error(`请先设置字段，调用 setDimensions() 和 setMeasures() 方法`);\n    }\n    \n    // 检查指标数量：如果指标为0且不是特殊图表类型，则抛出错误\n    if (measures.length === 0) {\n      const allowedTypesWithoutMeasures = ['wordcloud', 'listtable', 'pivottable'];\n      if (!allowedTypesWithoutMeasures.includes(chartType)) {\n        throw new Error(`${chartType}图表需要添加相应的指标字段，请调用 setMeasures() 或 addMeasureToArray() 方法添加指标`);\n      }\n    }\n    \n\n  }\n\n}"],"names":["util","_","assertIs","_arg","assertNever","_x","items","obj","item","validKeys","k","filtered","e","object","keys","key","arr","checker","val","joinValues","array","separator","value","objectUtil","first","second","__spreadValues","ZodParsedType","getParsedType","data","ZodIssueCode","ZodError","issues","sub","subs","actualProto","_mapper","mapper","issue","fieldErrors","processError","error","curr","i","el","formErrors","firstEl","errorMap","_ctx","message","overrideErrorMap","defaultErrorMap","getErrorMap","makeIssue","params","path","errorMaps","issueData","fullPath","fullIssue","__spreadProps","errorMessage","maps","m","map","addIssueToContext","ctx","overrideMap","x","ParseStatus","status","results","arrayValue","s","INVALID","pairs","__async","syncPairs","pair","finalObject","DIRTY","OK","isAborted","isDirty","isValid","isAsync","errorUtil","ParseInputLazyPath","parent","handleResult","result","processCreateParams","invalid_type_error","required_error","description","iss","_a","_b","ZodType","input","err","maybeAsyncResult","check","getIssueProperties","setError","refinementData","refinement","ZodEffects","ZodFirstPartyTypeKind","def","ZodOptional","ZodNullable","ZodArray","ZodPromise","option","ZodUnion","incoming","ZodIntersection","transform","defaultValueFunc","ZodDefault","ZodBranded","catchValueFunc","ZodCatch","This","target","ZodPipeline","ZodReadonly","cuidRegex","cuid2Regex","ulidRegex","uuidRegex","nanoidRegex","jwtRegex","durationRegex","emailRegex","_emojiRegex","emojiRegex","ipv4Regex","ipv4CidrRegex","ipv6Regex","ipv6CidrRegex","base64Regex","base64urlRegex","dateRegexSource","dateRegex","timeRegexSource","args","secondsRegexSource","secondsQuantifier","timeRegex","datetimeRegex","regex","opts","isValidIP","ip","version","isValidJWT","jwt","alg","header","base64","decoded","isValidCidr","ZodString","tooBig","tooSmall","validation","options","minLength","maxLength","len","ch","min","max","floatSafeRemainder","step","valDecCount","stepDecCount","decCount","valInt","stepInt","__pow","ZodNumber","kind","inclusive","ZodBigInt","ZodBoolean","ZodDate","minDate","maxDate","ZodSymbol","ZodUndefined","ZodNull","ZodAny","ZodUnknown","ZodNever","ZodVoid","schema","deepPartialify","ZodObject","newShape","fieldSchema","ZodTuple","shape","shapeKeys","extraKeys","keyValidator","unknownKeys","catchall","_c","_d","defaultError","augmentation","merging","index","mask","newField","createZodEnum","handleResults","unionErrors","childCtx","dirty","types","mergeValues","a","b","aType","bType","bKeys","sharedKeys","newObj","sharedValue","newArray","itemA","itemB","handleParsed","parsedLeft","parsedRight","merged","left","right","itemIndex","rest","schemas","ZodMap","keyType","valueType","finalMap","ZodSet","finalizeSet","elements","parsedSet","element","minSize","maxSize","size","ZodLazy","getter","ZodLiteral","values","ZodEnum","expectedValues","enumValues","newDef","opt","ZodNativeEnum","nativeEnumValues","promisified","effect","checkCtx","arg","processed","executeRefinement","acc","inner","base","preprocess","type","newCtx","ZodNaN","inResult","freeze","enumType","ChartType","ChartTypeSchema","z.enum","parseChartType","CHART_DATA_REQUIREMENTS","DataProcessor","rows","fieldNames","fields","fieldName","row","v","fieldMeta","customType","inferredType","autoConvertDates","sample","pattern","stats","role","fieldLower","dimensionKeywords","measureKeywords","keyword","uniqueRatio","nonNullValues","uniqueValues","numericValues","sum","sorted","mid","sortedValues","DataSet","rowsOrOptions","inferenceOptions","f","field","pipeline","steps","initialValue","context","initData","spec","configureLegend","visualStyle","configureLabel","configureTooltip","configureAxes","xBandAxis","xLinearAxis","yLinearAxis","yBandAxis","initVChartBar","chartType","encodes","createBarSpecPipeline","stacked","createBarStackedSpecPipeline","barGrouped","colGrouped","createBarGroupedSpecPipeline","percent","createBarPercentSpecPipeline","createColumnSpecPipeline","initVChartColumn","createColumnStackedSpecPipeline","createColumnGroupedSpecPipeline","createColumnPercentSpecPipeline","initVChartLine","createLineSpecPipeline","initVChartArea","mapping","createAreaSpecPipeline","createAreaStackedSpecPipeline","createAreaPercentSpecPipeline","initVChartScatter","createScatterSpecPipeline","initVChartPie","createPieSpecPipeline","initVChartDonut","createDonutSpecPipeline","initVTableList","createTableSpecPipeline","analyzeChartRequirements","dimensions","measures","requirement","chartAdapterStep","vizSeed","fieldSelection","analysisResult","vizSeedInitStep","_vizSeed","fieldMap","getDataSource","getFieldSelection","updateFieldMapAndFieldSelection","newFieldSelection","dim","measure","elevateStep","sourceData","reshapedRows","newRow","reduceStep","targetDimension","dimToReduce","remainingDimensions","dimValues","groupedData","groups","groupKey","groupRows","firstRow","dimValue","matchingRow","newColumnName","newMeasures","originalField","copiedFieldName","copyDimensionStep","dimensionName","updatedRows","dataReshapeStep_1M1D1G","operations","currentDimensionLength","afterDimensionLength","vizSeedCleanupStep","mapHorizontalBarChannels","mapHorizontalBar","autoMapping","filteredMapping","updatedEncodes","createBarVizSeedPipeline","mapVerticalColumnChannels","mapVerticalColumn","createColumnVizSeedPipeline","mapTimeSeriesChannels","mapTimeSeries","createLineVizSeedPipeline","createAreaVizSeedPipeline","dataReshapeStep","currentDims","currentMeas","targetDims","targetMeas","currentFieldSelection","beforeLength","afterFieldSelection","finalReshapeType","mapTwoMeasuresChannels","mapTwoMeasures","createScatterVizSeedPipeline","mapCategoryValueChannels","mapCategoryValue","dataReshapeStep_1M1D","createPieVizSeedPipeline","createDonutVizSeedPipeline","mapTableRowColumnChannels","mapTableRowColumn","createTableVizSeedPipeline","specPipelineMap","SpecPipelines.createBarSpecPipeline","SpecPipelines.createBarStackedSpecPipeline","SpecPipelines.createBarGroupedSpecPipeline","SpecPipelines.createBarPercentSpecPipeline","SpecPipelines.createColumnSpecPipeline","SpecPipelines.createColumnStackedSpecPipeline","SpecPipelines.createColumnGroupedSpecPipeline","SpecPipelines.createColumnPercentSpecPipeline","SpecPipelines.createLineSpecPipeline","SpecPipelines.createAreaSpecPipeline","SpecPipelines.createAreaStackedSpecPipeline","SpecPipelines.createAreaPercentSpecPipeline","SpecPipelines.createScatterSpecPipeline","SpecPipelines.createPieSpecPipeline","SpecPipelines.createDonutSpecPipeline","SpecPipelines.createTableSpecPipeline","vizSeedPipelineMap","VizSeedPipelines.createBarVizSeedPipeline","VizSeedPipelines.createColumnVizSeedPipeline","VizSeedPipelines.createLineVizSeedPipeline","VizSeedPipelines.createAreaVizSeedPipeline","VizSeedPipelines.createScatterVizSeedPipeline","VizSeedPipelines.createPieVizSeedPipeline","VizSeedPipelines.createDonutVizSeedPipeline","VizSeedPipelines.createTableVizSeedPipeline","buildSpec","selectedPipeline","buildVizSeed","vizSeedPipeline","isObject","assign","initial","override","VizSeedBuilder","dataOrRows","vizSeedDSL","clonedDSL","builder","flattenedMeasures","dimension","fieldId","alias","selectedFields","filteredRow","title","visible","styleOptions","specContext"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,66,67]}