{"version":3,"file":"DataReshapeModule_1M1D1G-BxQKi9wj.js","sources":["../../src/pipeline/vizSeed/utils/DimensionAndMeasureCopy.ts","../../src/pipeline/vizSeed/dataReshape/DataReshapeModule_1M1D1G.ts"],"sourcesContent":["/**\n * 维度和指标复制工具模块\n * 提供复制指定维度或指标字段的功能，新字段命名为原字段名_copy\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection, FieldDefinition } from '../../PipelineCore';\n\n// 获取数据源的辅助函数\nconst getDataSource = (vizSeed: any, context: PipelineContext): any[] => {\n  // 优先使用data，如果为空则使用data.rows\n  return context.data;\n};\n\n// 获取字段选择的辅助函数\nconst getFieldSelection = (context: PipelineContext): FieldSelection => {\n  return context.fieldSelection || { dimensions: [], measures: [] };\n};\n\n// 更新fieldMap的辅助函数\nconst updateFieldMapAndFieldSelection = (context: PipelineContext, newFieldSelection: FieldSelection, originalField: FieldDefinition, copiedFieldName: string) => {\n  if (context.fieldMap) {\n    // 添加复制的字段到fieldMap\n    if (!context.fieldMap![copiedFieldName]) {\n      context.fieldMap![copiedFieldName] = {\n        id: copiedFieldName,\n        type: originalField.type,\n        alias: copiedFieldName,\n        location: originalField.location,\n      };\n    }\n  }\n\n  if (context.fieldSelection) {\n    context.fieldSelection = newFieldSelection;\n  }\n};\n\n/**\n * 复制指定维度字段的Pipeline步骤\n * @param vizSeed VizSeed对象\n * @param context Pipeline上下文\n * @param dimensionName 要复制的维度字段名称，如果不指定则复制第一个维度\n */\nexport const copyDimensionStep: PipelineStep = (vizSeed: any, context: PipelineContext, dimensionName?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否有维度可复制\n  if (fieldSelection.dimensions.length === 0) {\n    return vizSeed;\n  }\n  \n  // 确定要复制的维度\n  const targetDimension = dimensionName || fieldSelection.dimensions[0];\n  \n  // 检查目标维度是否存在\n  if (!fieldSelection.dimensions.includes(targetDimension)) {\n    throw new Error(`维度字段 ${targetDimension} 不存在于当前字段选择中`);\n  }\n  \n  const copiedFieldName = `${targetDimension}_copy`;\n  \n  // 复制数据并添加新字段\n  const updatedRows = sourceData.map(row => ({\n    ...row,\n    [copiedFieldName]: row[targetDimension]\n  }));\n  \n  // 更新字段选择，将复制的字段添加到维度列表\n  const newFieldSelection = {\n    dimensions: [...fieldSelection.dimensions, copiedFieldName],\n    measures: [...fieldSelection.measures]\n  };\n  \n  // 获取原字段类型\n  const originalField = context.fieldMap?.[targetDimension];\n  \n  // 更新fieldMap和fieldSelection\n  updateFieldMapAndFieldSelection(context, newFieldSelection, originalField, copiedFieldName);\n  \n  // 更新data\n  context.data = updatedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap,\n    copyInfo: {\n      type: 'dimension',\n      originalField: targetDimension,\n      copiedField: copiedFieldName\n    }\n  };\n};\n\n/**\n * 复制指定指标字段的Pipeline步骤\n * @param vizSeed VizSeed对象\n * @param context Pipeline上下文\n * @param measureName 要复制的指标字段名称，如果不指定则复制第一个指标\n */\nexport const copyMeasureStep: PipelineStep = (vizSeed: any, context: PipelineContext, measureName?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否有指标可复制\n  if (fieldSelection.measures.length === 0) {\n    return vizSeed;\n  }\n  \n  // 确定要复制的指标\n  const targetMeasure = measureName || fieldSelection.measures[0];\n  \n  // 检查目标指标是否存在\n  if (!fieldSelection.measures.includes(targetMeasure)) {\n    throw new Error(`指标字段 ${targetMeasure} 不存在于当前字段选择中`);\n  }\n  \n  const copiedFieldName = `${targetMeasure}_copy`;\n  \n  // 复制数据并添加新字段\n  const updatedRows = sourceData.map(row => ({\n    ...row,\n    [copiedFieldName]: row[targetMeasure]\n  }));\n  \n  // 更新字段选择，将复制的字段添加到指标列表\n  const newFieldSelection = {\n    dimensions: [...fieldSelection.dimensions],\n    measures: [...fieldSelection.measures, copiedFieldName]\n  };\n  \n  // 获取原字段类型\n  const originalField = context.fieldMap?.[targetMeasure];\n  \n  // 更新fieldMap和fieldSelection\n  updateFieldMapAndFieldSelection(context, newFieldSelection, originalField, copiedFieldName);\n  \n  // 更新data\n  context.data = updatedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};","/**\n * 数据重塑模块 - 使用Pipeline子模块实现维度重塑\n * 输入：指标大于等于1，维度大于等于0\n * 输出：维度2，指标1\n * 适用于：饼图、环形图等需要2维1指标的图表\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../../PipelineCore';\nimport { CHART_DATA_REQUIREMENTS } from '../../../types/charts';\nimport { elevateStep, reduceStep } from '../utils/ElevateAndReduce';\nimport { copyDimensionStep } from '../utils/DimensionAndMeasureCopy';\n\n\n\n// elevateStep 和 reduceStep 已从 './utils/ElevateAndReduce' 导入\n\n/**\n * 数据重塑Pipeline步骤 - 使用子模块实现智能重塑\n */\nexport const dataReshapeStep_1M1D1G: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n\n  const targetDims = 2;\n  const targetMeas = 1;\n  \n  // 如果当前结构已经符合要求\n  if (context.fieldSelection.dimensions.length === targetDims && context.fieldSelection.measures.length === targetMeas) {\n    return {\n      ...vizSeed,\n      data: context.data,\n      reshapeInfo: {\n        steps: []\n      }\n    };\n  }\n\n  const operations: string[] = [];\n\n  if(context.fieldSelection.dimensions.length > 0){\n    // 如果维度大于0，使用降维子模块和升维子模块\n\n    let currentDimensionLength = context.fieldSelection.dimensions.length;\n    // 多次降维直到达到目标维度数\n    while (currentDimensionLength > targetDims - 1) {\n      \n      vizSeed = reduceStep(vizSeed, context);\n      \n      // 检查是否实际进行了降维\n      const afterDimensionLength = context.fieldSelection.dimensions.length;\n      if (afterDimensionLength >= currentDimensionLength) {\n        break; // 防止无限循环\n      }\n      \n      currentDimensionLength = afterDimensionLength;\n      operations.push('reduce');\n    }\n\n\n    // 升维子模块\n    if (context.fieldSelection.measures.length >= targetMeas) {\n      vizSeed = elevateStep(vizSeed, context);\n      operations.push('elevate');\n    }\n  }\n  else{\n    // 维度为0的情况：先升维，再复制维度\n    \n    // 第一步：升维 - 将多指标转为单指标+指标名称维度\n    if (context.fieldSelection.measures.length >= targetMeas) {\n      vizSeed = elevateStep(vizSeed, context);\n      operations.push('elevate');\n    }\n    \n    // 第二步：复制维度 - 确保有足够的维度数量\n    if (context.fieldSelection.dimensions.length > 0 && context.fieldSelection.dimensions.length < targetDims) {\n      vizSeed = copyDimensionStep(vizSeed, context);\n      operations.push('copyDimension');\n    }\n  }\n\n  return {\n    ...vizSeed,\n    data: context.data,\n    reshapeInfo: {\n      steps: operations\n    }\n  };\n};\n\n"],"names":["getDataSource","vizSeed","context","getFieldSelection","updateFieldMapAndFieldSelection","newFieldSelection","originalField","copiedFieldName","copyDimensionStep","dimensionName","sourceData","fieldSelection","targetDimension","updatedRows","row","__spreadProps","__spreadValues","_a","dataReshapeStep_1M1D1G","operations","currentDimensionLength","reduceStep","afterDimensionLength","elevateStep"],"mappings":"2eAQA,MAAMA,EAAgB,CAACC,EAAcC,IAE5BA,EAAQ,KAIXC,EAAqBD,GAClBA,EAAQ,gBAAkB,CAAE,WAAY,CAAA,EAAI,SAAU,EAAC,EAI1DE,EAAkC,CAACF,EAA0BG,EAAmCC,EAAgCC,IAA4B,CAC5JL,EAAQ,WAELA,EAAQ,SAAUK,CAAe,IACpCL,EAAQ,SAAUK,CAAe,EAAI,CACnC,GAAIA,EACJ,KAAMD,EAAc,KACpB,MAAOC,EACP,SAAUD,EAAc,QAAA,IAK1BJ,EAAQ,iBACVA,EAAQ,eAAiBG,EAE7B,EAQaG,EAAkC,CAACP,EAAcC,EAA0BO,IAA2B,OACjH,MAAMC,EAAaV,EAAcC,EAASC,CAAO,EAC3CS,EAAiBR,EAAkBD,CAAO,EAGhD,GAAIS,EAAe,WAAW,SAAW,EACvC,OAAOV,EAIT,MAAMW,EAAkBH,GAAiBE,EAAe,WAAW,CAAC,EAGpE,GAAI,CAACA,EAAe,WAAW,SAASC,CAAe,EACrD,MAAM,IAAI,MAAM,QAAQA,CAAe,cAAc,EAGvD,MAAML,EAAkB,GAAGK,CAAe,QAGpCC,EAAcH,EAAW,IAAII,GAAQC,EAAAC,EAAA,GACtCF,GADsC,CAEzC,CAACP,CAAe,EAAGO,EAAIF,CAAe,CAAA,EACtC,EAGIP,EAAoB,CACxB,WAAY,CAAC,GAAGM,EAAe,WAAYJ,CAAe,EAC1D,SAAU,CAAC,GAAGI,EAAe,QAAQ,CAAA,EAIjCL,GAAgBW,EAAAf,EAAQ,WAAR,YAAAe,EAAmBL,GAGzC,OAAAR,EAAgCF,EAASG,EAAmBC,EAAeC,CAAe,EAG1FL,EAAQ,KAAOW,EAERE,EAAAC,EAAA,GACFf,GADE,CAEL,KAAMC,EAAQ,KACd,eAAgBA,EAAQ,eACxB,SAAUA,EAAQ,SAClB,SAAU,CACR,KAAM,YACN,cAAeU,EACf,YAAaL,CAAA,CACf,EAEJ,EC3EaW,EAAuC,CAACjB,EAAcC,IAA6B,CAM9F,GAAIA,EAAQ,eAAe,WAAW,SAAW,GAAcA,EAAQ,eAAe,SAAS,SAAW,EACxG,OAAOa,EAAAC,EAAA,GACFf,GADE,CAEL,KAAMC,EAAQ,KACd,YAAa,CACX,MAAO,CAAA,CAAC,CACV,GAIJ,MAAMiB,EAAuB,CAAA,EAE7B,GAAGjB,EAAQ,eAAe,WAAW,OAAS,EAAE,CAG9C,IAAIkB,EAAyBlB,EAAQ,eAAe,WAAW,OAE/D,KAAOkB,EAAyB,GAAgB,CAE9CnB,EAAUoB,EAAWpB,EAASC,CAAO,EAGrC,MAAMoB,EAAuBpB,EAAQ,eAAe,WAAW,OAC/D,GAAIoB,GAAwBF,EAC1B,MAGFA,EAAyBE,EACzBH,EAAW,KAAK,QAAQ,CAAA,CAKtBjB,EAAQ,eAAe,SAAS,QAAU,IAC5CD,EAAUsB,EAAYtB,EAASC,CAAO,EACtCiB,EAAW,KAAK,SAAS,EAC3B,MAMIjB,EAAQ,eAAe,SAAS,QAAU,IAC5CD,EAAUsB,EAAYtB,EAASC,CAAO,EACtCiB,EAAW,KAAK,SAAS,GAIvBjB,EAAQ,eAAe,WAAW,OAAS,GAAKA,EAAQ,eAAe,WAAW,OAAS,IAC7FD,EAAUO,EAAkBP,EAASC,CAAO,EAC5CiB,EAAW,KAAK,eAAe,GAInC,OAAOJ,EAAAC,EAAA,GACFf,GADE,CAEL,KAAMC,EAAQ,KACd,YAAa,CACX,MAAOiB,CAAA,CACT,EAEJ"}