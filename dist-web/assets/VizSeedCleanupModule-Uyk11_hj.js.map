{"version":3,"file":"VizSeedCleanupModule-Uyk11_hj.js","sources":["../../src/pipeline/vizSeed/ChartAdapterModule.ts","../../src/pipeline/vizSeed/VizSeedInitModule.ts","../../src/pipeline/vizSeed/utils/ElevateAndReduce.ts","../../src/pipeline/vizSeed/VizSeedCleanupModule.ts"],"sourcesContent":["/**\n * 图表适配分析器\n * 分析图表类型对维度和指标的要求，并提供重塑策略建议\n */\n\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\nimport { ChartType, ChartDataRequirement, CHART_DATA_REQUIREMENTS } from '../../types/charts';\n\n// 分析结果\nexport interface ChartAnalysisResult {\n  currentStructure: {\n    dimensions: number;\n    measures: number;\n    dimensionNames: string[];\n    measureNames: string[];\n  };\n  targetStructure: ChartDataRequirement;\n}\n\n\n\n// 分析图表数据要求\nexport const analyzeChartRequirements = (\n  chartType: ChartType,\n  dimensions: string[],\n  measures: string[]\n): ChartAnalysisResult => {\n  const requirement = CHART_DATA_REQUIREMENTS[chartType];\n  \n  const currentStructure = {\n    dimensions: dimensions.length,\n    measures: measures.length,\n    dimensionNames: dimensions,\n    measureNames: measures\n  };\n\n  return {\n    currentStructure,\n    targetStructure: requirement\n  };\n};\n\n// 图表适配分析步骤\nexport const chartAdapterStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  const { chartType, fieldSelection } = context;\n  \n\n  // 分析图表要求\n  const analysisResult = analyzeChartRequirements(\n    chartType,\n    fieldSelection.dimensions,\n    fieldSelection.measures\n  );\n\n  // 将分析结果添加到vizSeed\n  return {\n    ...vizSeed,\n    analysisResult\n  };\n};\n\n","/**\n * VizSeed初始化模块\n * 负责创建基础的VizSeed对象结构\n */\n\nimport { encode } from 'punycode';\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\n\n/**\n * VizSeed基础初始化步骤\n * 创建包含5个核心属性的VizSeed对象\n */\nexport const vizSeedInitStep: PipelineStep = (_vizSeed: any, context: PipelineContext) => {\n  const { chartType, encodes, fieldMap, data, visualStyle} = context;\n  \n  return {\n    chartType: chartType,\n    data: data || [], // 初始为空\n    fieldMap: fieldMap || {},\n    encodes: encodes || {},\n    visualStyle: visualStyle || {}\n  };\n};","/**\n * 升维和降维Pipeline子模块工具函数\n */\n\nimport { PipelineStep, PipelineContext, FieldSelection } from '../../PipelineCore';\n\n// 获取数据源的辅助函数\nconst getDataSource = (vizSeed: any, context: PipelineContext): any[] => {\n  return context.data || [];\n};\n\n// 获取字段选择的辅助函数\nconst getFieldSelection = (context: PipelineContext): FieldSelection => {\n  return context.fieldSelection || { dimensions: [], measures: [] };\n};\n\n// 更新fieldMap的辅助函数\nconst updateFieldMapAndFieldSelection = (context: PipelineContext, newFieldSelection: FieldSelection) => {\n  if (context.fieldMap) {\n    // 更新fieldMap中的字段位置\n    Object.keys(context.fieldMap).forEach(key => {\n      if (newFieldSelection.dimensions.includes(key)) {\n        context.fieldMap![key].location = 'dimension';\n      } else if (newFieldSelection.measures.includes(key)) {\n        context.fieldMap![key].location = 'measure';\n      }\n    });\n    \n    // 添加新字段（如升维产生的特殊字段）\n    newFieldSelection.dimensions.forEach(dim => {\n      if (!context.fieldMap![dim]) {\n        context.fieldMap![dim] = {\n          id: dim,\n          type: 'string',\n          alias: dim,\n          location: 'dimension'\n        };\n      }\n    });\n    \n    newFieldSelection.measures.forEach(measure => {\n      if (!context.fieldMap![measure]) {\n        context.fieldMap![measure] = {\n          id: measure,\n          type: 'number',\n          alias: measure,\n          location: 'measure'\n        };\n      }\n    });\n  }\n  if(context.fieldSelection){\n    context.fieldSelection = newFieldSelection;\n  }\n};\n\n/**\n * 升维Pipeline子模块：将多指标转为单指标+指标名称维度\n */\nexport const elevateStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  const sourceData = getDataSource(vizSeed,context);\n  const fieldSelection = getFieldSelection(context);\n  \n  if(fieldSelection.measures.length <= 0) {\n    return vizSeed; // 如果没有指标，直接返回\n  }\n  const reshapedRows: any[] = [];\n  const { dimensions, measures } = fieldSelection;\n\n  // 为每个数据行，将多个指标转换为多行数据\n  sourceData.forEach(row => {\n    measures.forEach(measure => {\n      const newRow: any = {};\n      \n      // 复制所有维度字段\n      dimensions.forEach(dim => {\n        newRow[dim] = row[dim];\n      });\n      \n      // 添加特殊字段\n      newRow['__MeasureName__'] = measure;\n      newRow['__MeasureValue__'] = row[measure] || 0;\n      \n      reshapedRows.push(newRow);\n    });\n  });\n\n  // 更新字段选择\n  const newFieldSelection = {\n    dimensions: [...dimensions, '__MeasureName__'],\n    measures: ['__MeasureValue__']\n  };\n  \n  // 更新fieldMap\n  updateFieldMapAndFieldSelection(context, newFieldSelection);\n  \n  // 更新data\n  context.data = reshapedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};\n\n/**\n * 降维Pipeline子模块：将某个维度的值变成指标\n */\nexport const reduceStep: PipelineStep = (vizSeed: any, context: PipelineContext, targetDimension?: string) => {\n  const sourceData = getDataSource(vizSeed, context);\n  const fieldSelection = getFieldSelection(context);\n  \n  // 检查是否需要降维\n  if (fieldSelection.dimensions.length <= 0) {\n    return vizSeed;\n  }\n\n  const { dimensions, measures } = fieldSelection;\n  const dimToReduce = targetDimension || dimensions[dimensions.length - 1];\n  const remainingDimensions = dimensions.filter(dim => dim !== dimToReduce);\n  \n  // 获取该维度的所有可能值\n  const dimValues = [...new Set(sourceData.map(row => row[dimToReduce]))];\n  \n  // 构建新的数据结构\n  const reshapedRows: any[] = [];\n  \n  // 按剩余维度分组\n  const groupedData = sourceData.reduce((groups, row) => {\n    const groupKey = remainingDimensions.map(dim => row[dim]).join('|');\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(row);\n    return groups;\n  }, {} as Record<string, any[]>);\n\n  // 为每个组创建新的行\n  Object.entries(groupedData).forEach(([, groupRows]) => {\n    const rows = groupRows as any[];\n    const newRow: any = {};\n    \n    // 设置剩余维度的值\n    if (remainingDimensions.length > 0) {\n      const firstRow = rows[0];\n      remainingDimensions.forEach(dim => {\n        newRow[dim] = firstRow[dim];\n      });\n    }\n    \n    // 为每个维度值创建新的指标列\n    dimValues.forEach(dimValue => {\n      const matchingRow = rows.find((row: any) => row[dimToReduce] === dimValue);\n      \n      // 为每个原始指标创建新的列名\n      measures.forEach(measure => {\n        const newColumnName = `${dimValue}_${measure}`;\n        newRow[newColumnName] = matchingRow ? (matchingRow[measure] || 0) : 0;\n      });\n    });\n    \n    reshapedRows.push(newRow);\n  });\n\n  // 生成新的指标列表\n  const newMeasures: string[] = [];\n  dimValues.forEach(dimValue => {\n    measures.forEach(measure => {\n      newMeasures.push(`${dimValue}_${measure}`);\n    });\n  });\n  \n  // 更新字段选择\n  const newFieldSelection = {\n    dimensions: remainingDimensions,\n    measures: newMeasures\n  };\n  \n  // 更新fieldMap\n  updateFieldMapAndFieldSelection(context, newFieldSelection);\n  \n  // 更新data\n  context.data = reshapedRows;\n  \n  return {\n    ...vizSeed,\n    data: context.data,\n    fieldSelection: context.fieldSelection,\n    fieldMap: context.fieldMap\n  };\n};","/**\n * VizSeed清理模块\n * 负责最终清理，确保只保留5个核心属性\n */\n\nimport { theme } from '@visactor/vtable/es/register';\nimport { PipelineStep, PipelineContext } from '../PipelineCore';\n\n/**\n * VizSeed最终清理步骤\n * en\n */\nexport const vizSeedCleanupStep: PipelineStep = (vizSeed: any, context: PipelineContext) => {\n  \n  return {\n    chartType: context.chartType,\n    data: context.data,\n    fieldMap: context.fieldMap,\n    encodes: context.encodes,\n    style: context.visualStyle,\n    dimensions: context.fieldSelection?.dimensions || [],\n    measures: context.fieldSelection?.measures || [],\n    rowDimensions: [],\n    columnDimensions: [],\n    theme: context.theme,\n  };\n};"],"names":["analyzeChartRequirements","chartType","dimensions","measures","requirement","CHART_DATA_REQUIREMENTS","chartAdapterStep","vizSeed","context","fieldSelection","analysisResult","__spreadProps","__spreadValues","vizSeedInitStep","_vizSeed","encodes","fieldMap","data","visualStyle","getDataSource","getFieldSelection","updateFieldMapAndFieldSelection","newFieldSelection","key","dim","measure","elevateStep","sourceData","reshapedRows","row","newRow","reduceStep","targetDimension","dimToReduce","remainingDimensions","dimValues","groupedData","groups","groupKey","groupRows","rows","firstRow","dimValue","matchingRow","newColumnName","newMeasures","vizSeedCleanupStep","_a","_b"],"mappings":"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"}