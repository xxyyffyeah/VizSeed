var d=Object.defineProperty,u=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var b=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;var r=(o,e,n)=>e in o?d(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n,p=(o,e)=>{for(var n in e||(e={}))b.call(e,n)&&r(o,n,e[n]);if(a)for(var n of a(e))f.call(e,n)&&r(o,n,e[n]);return o},l=(o,e)=>u(o,S(e));import{p as g}from"./PipelineCore-BG5ZN1GD.js";import{v as h,c as T,a as z}from"./VizSeedCleanupModule-Cwm6WaOq.js";import{d as C}from"./DataReshapeModule-BfmKAKcc.js";import"./VizSeedBuilder-C39Vgvem.js";import"./index-t07qnjBL.js";const w=o=>{const{dimensions:e,measures:n}=o;return{rowDimension:e[0],columnDimension:e[1],measure:n[0]}},R=(o,e)=>{const{fieldSelection:n}=e;if(!n||n.dimensions.length===0&&n.measures.length===0)return o;console.log("🎨 表格行列自动通道映射，字段选择:",n);const c=w(n),t={};Object.entries(c).forEach(([m,s])=>{s!=null&&(t[m]=s)}),console.log("🔗 表格行列通道映射结果:",t);const i=[t];return e.encodes=i,l(p({},o),{encodes:i})},A=()=>g([h,T,C,R,z],{});export{A as createTableVizSeedPipeline};
//# sourceMappingURL=Table-j0Cmi8db.js.map
