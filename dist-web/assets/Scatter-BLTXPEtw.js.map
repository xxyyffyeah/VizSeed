{"version":3,"file":"Scatter-BLTXPEtw.js","sources":["../../src/pipeline/vizSeed/channelMapping/TwoMeasureMapping.ts","../../src/pipeline/vizSeed/vizSeedPipelines/Scatter.ts"],"sourcesContent":["/**\n * 双指标映射策略\n * 功能：x通道使用第一个指标，y通道使用第二个指标，color通道使用第一个维度\n * 适用于：散点图等需要比较两个指标关系的图表\n */\n\nimport { ChannelMapping } from '../../../types/charts';\nimport { FieldSelection, PipelineStep } from '../../PipelineCore';\n\n/**\n * 双指标映射函数\n */\nconst mapTwoMeasuresChannels = (fieldSelection: FieldSelection): ChannelMapping => {\n  const { dimensions, measures } = fieldSelection;\n  \n  return {\n    x: measures[0],       // X轴使用第一个指标\n    y: measures[1],       // Y轴使用第二个指标\n    color: dimensions[0]  // 颜色使用第一个维度\n  };\n};\n\n/**\n * 双指标通道映射Pipeline步骤\n */\nexport const mapTwoMeasures: PipelineStep = (vizSeed: any, context: any) => {\n  const { fieldSelection } = context;\n  \n  if (!fieldSelection || (fieldSelection.dimensions.length === 0 && fieldSelection.measures.length === 0)) {\n    return vizSeed;\n  }\n\n  console.log(`🎨 双指标自动通道映射，字段选择:`, fieldSelection);\n  \n  // 使用双指标映射策略\n  const autoMapping = mapTwoMeasuresChannels(fieldSelection);\n  \n  // 过滤掉undefined的值\n  const filteredMapping: any = {};\n  Object.entries(autoMapping).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      (filteredMapping as any)[key] = value;\n    }\n  });\n  \n  console.log(`🔗 双指标通道映射结果:`, filteredMapping);\n  \n  // 更新context和vizSeed\n  const updatedEncodes = [filteredMapping];\n  context.encodes = updatedEncodes;\n  \n  return {\n    ...vizSeed,\n    encodes: updatedEncodes\n  };\n};","/**\n * SCATTER图表VizSeed Pipeline\n */\n\nimport { pipeline, PipelineStep } from '../../PipelineCore';\nimport { chartAdapterStep } from '../ChartAdapterModule';\nimport { vizSeedInitStep } from '../VizSeedInitModule';\nimport { dataReshapeStep } from '../DataReshapeModule';\nimport { vizSeedCleanupStep } from '../VizSeedCleanupModule';\nimport { mapTwoMeasures } from '../channelMapping/TwoMeasureMapping';\n\n// 创建SCATTER图表VizSeed Pipeline\nexport const createScatterVizSeedPipeline = () => {\n  const buildScatterVizSeedSteps: PipelineStep[] = [\n    vizSeedInitStep,\n    chartAdapterStep,\n    dataReshapeStep,\n    mapTwoMeasures,\n    vizSeedCleanupStep\n  ];\n  return pipeline(buildScatterVizSeedSteps, {});\n};"],"names":["mapTwoMeasuresChannels","fieldSelection","dimensions","measures","mapTwoMeasures","vizSeed","context","autoMapping","filteredMapping","key","value","updatedEncodes","__spreadProps","__spreadValues","createScatterVizSeedPipeline","pipeline","vizSeedInitStep","chartAdapterStep","dataReshapeStep","vizSeedCleanupStep"],"mappings":"spBAYA,MAAMA,EAA0BC,GAAmD,CACjF,KAAM,CAAE,WAAAC,EAAY,SAAAC,CAAA,EAAaF,EAEjC,MAAO,CACL,EAAGE,EAAS,CAAC,EACb,EAAGA,EAAS,CAAC,EACb,MAAOD,EAAW,CAAC,CAAA,CAEvB,EAKaE,EAA+B,CAACC,EAAcC,IAAiB,CAC1E,KAAM,CAAE,eAAAL,GAAmBK,EAE3B,GAAI,CAACL,GAAmBA,EAAe,WAAW,SAAW,GAAKA,EAAe,SAAS,SAAW,EACnG,OAAOI,EAGT,QAAQ,IAAI,qBAAsBJ,CAAc,EAGhD,MAAMM,EAAcP,EAAuBC,CAAc,EAGnDO,EAAuB,CAAA,EAC7B,OAAO,QAAQD,CAAW,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACzBA,GAAU,OAClCF,EAAwBC,CAAG,EAAIC,EAClC,CACD,EAED,QAAQ,IAAI,gBAAiBF,CAAe,EAG5C,MAAMG,EAAiB,CAACH,CAAe,EACvC,OAAAF,EAAQ,QAAUK,EAEXC,EAAAC,EAAA,GACFR,GADE,CAEL,QAASM,CAAA,EAEb,EC3CaG,EAA+B,IAQnCC,EAP0C,CAC/CC,EACAC,EACAC,EACAd,EACAe,CAAA,EAEwC,EAAE"}